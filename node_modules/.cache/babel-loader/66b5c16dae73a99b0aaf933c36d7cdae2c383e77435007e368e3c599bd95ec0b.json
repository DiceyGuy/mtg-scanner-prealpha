{"ast":null,"code":"import _objectSpread from\"C:/Users/kim-a/Documents/DiceyTeck/MTG Scanner BACKUP/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Scanner.js - PROFESSIONAL VERSION with Enhanced UI Components\nimport React,{useState,useRef,useEffect}from'react';import ClaudeVisionService from'./ClaudeVisionService';import CardDisplayUI from'./CardDisplayUI';import DeckManager from'./DeckManager';import MTGKnowledgeBase from'./MTGKnowledgeBase';import EditionSelector from'./EditionSelector';import'./CardDisplay.css';// 🔥 NEW: Import professional components\nimport{ProfessionalCooldownStatus,ProfessionalCameraStatus,ProfessionalScanControls,ProfessionalCardResult,ProfessionalEditionSelector,ProfessionalStats,showProfessionalToast,ProfessionalTabs}from'./ProfessionalComponents';// 🔥 IMPROVED Smart Cooldown System\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";class MTGScannerCooldown{constructor(){this.lastDetectedCard=null;this.lastDetectionTime=0;this.lastApiCall=0;this.consecutiveDetections=0;this.isEditionSelectorOpen=false;this.detectionBuffer=[];// 🔥 LESS AGGRESSIVE Cooldown periods\nthis.SAME_CARD_COOLDOWN=15000;// 15 seconds for same card (was 8)\nthis.MIN_API_INTERVAL=4000;// 4 seconds between API calls (was 2)\nthis.DETECTION_STABILITY=3;// Need 3 consistent detections\nthis.MAX_CONSECUTIVE=2;// Max consecutive before pause\nthis.LONG_PAUSE_DURATION=30000;// 30 second pause after max consecutive\nthis.isLongPauseActive=false;this.longPauseStartTime=0;}// Check if we should scan this frame\nshouldScan(){let cardName=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;const now=Date.now();// 1. Don't scan if edition selector is open\nif(this.isEditionSelectorOpen){console.log(\"🚫 Scanning blocked: Edition selector open\");return false;}// 2. Check long pause (after too many consecutive detections)\nif(this.isLongPauseActive){const pauseRemaining=this.LONG_PAUSE_DURATION-(now-this.longPauseStartTime);if(pauseRemaining>0){console.log(\"\\uD83D\\uDEAB Scanning blocked: Long pause active (\".concat(Math.ceil(pauseRemaining/1000),\"s remaining)\"));return false;}else{// Reset long pause\nthis.isLongPauseActive=false;this.consecutiveDetections=0;console.log(\"✅ Long pause ended, scanning can resume\");}}// 3. Enforce minimum API interval\nif(now-this.lastApiCall<this.MIN_API_INTERVAL){const waitTime=this.MIN_API_INTERVAL-(now-this.lastApiCall);console.log(\"\\uD83D\\uDEAB Scanning blocked: API cooldown (\".concat(Math.ceil(waitTime/1000),\"s remaining)\"));return false;}// 4. Same card cooldown\nif(cardName&&cardName===this.lastDetectedCard){const timeSinceLastDetection=now-this.lastDetectionTime;if(timeSinceLastDetection<this.SAME_CARD_COOLDOWN){const waitTime=this.SAME_CARD_COOLDOWN-timeSinceLastDetection;console.log(\"\\uD83D\\uDEAB Scanning blocked: Same card \\\"\".concat(cardName,\"\\\" cooldown (\").concat(Math.ceil(waitTime/1000),\"s remaining)\"));return false;}}return true;}// Add detection to buffer for stability checking\naddDetection(cardName,confidence){const now=Date.now();// Add to buffer\nthis.detectionBuffer.push({cardName,confidence,timestamp:now});// Keep only recent detections (last 10 seconds)\nthis.detectionBuffer=this.detectionBuffer.filter(detection=>now-detection.timestamp<10000);// Check stability - need consistent detections of same card\nconst recentSameCard=this.detectionBuffer.filter(detection=>detection.cardName===cardName);return recentSameCard.length>=this.DETECTION_STABILITY;}// Record a successful detection\nrecordDetection(cardName){const now=Date.now();if(cardName===this.lastDetectedCard){this.consecutiveDetections++;}else{this.consecutiveDetections=1;this.lastDetectedCard=cardName;}this.lastDetectionTime=now;this.lastApiCall=now;// Clear detection buffer after successful detection\nthis.detectionBuffer=[];console.log(\"\\u2705 Detection recorded: \\\"\".concat(cardName,\"\\\" (consecutive: \").concat(this.consecutiveDetections,\")\"));// Check if we need to activate long pause\nif(this.consecutiveDetections>=this.MAX_CONSECUTIVE){this.isLongPauseActive=true;this.longPauseStartTime=now;console.log(\"\\uD83D\\uDED1 Too many consecutive detections (\".concat(this.MAX_CONSECUTIVE,\"), activating long pause (\").concat(this.LONG_PAUSE_DURATION/1000,\"s)\"));}}// Reset cooldowns (call when user interaction occurs)\nresetCooldowns(){console.log(\"🔄 Cooldowns reset by user interaction\");this.consecutiveDetections=0;this.lastDetectedCard=null;this.lastDetectionTime=0;this.detectionBuffer=[];this.isLongPauseActive=false;this.longPauseStartTime=0;}// Set edition selector state\nsetEditionSelectorOpen(isOpen){this.isEditionSelectorOpen=isOpen;if(isOpen){console.log(\"🎭 Edition selector opened - scanning paused\");}else{console.log(\"🎭 Edition selector closed - scanning can resume\");// Don't reset cooldowns when edition selector closes\n}}// Get cooldown status for UI\ngetCooldownStatus(){const now=Date.now();let longPauseRemaining=0;if(this.isLongPauseActive){longPauseRemaining=Math.max(0,this.LONG_PAUSE_DURATION-(now-this.longPauseStartTime));}return{sameCardCooldown:this.lastDetectedCard?Math.max(0,this.SAME_CARD_COOLDOWN-(now-this.lastDetectionTime)):0,apiCooldown:Math.max(0,this.MIN_API_INTERVAL-(now-this.lastApiCall)),consecutiveDetections:this.consecutiveDetections,longPauseRemaining,isEditionSelectorOpen:this.isEditionSelectorOpen,canScan:this.shouldScan(this.lastDetectedCard),detectionBufferSize:this.detectionBuffer.length,stabilityRequired:this.DETECTION_STABILITY};}}const Scanner=()=>{var _pendingCardData$card,_pendingCardData$card2;// Core scanner state\nconst[isScanning,setIsScanning]=useState(false);const[scanResult,setScanResult]=useState(null);const[cameraStatus,setCameraStatus]=useState('initializing');const[currentCard,setCurrentCard]=useState(null);const[scanMode,setScanMode]=useState('continuous');// Smart scanning state\nconst[continuousCount,setContinuousCount]=useState(0);const[showContinueDialog,setShowContinueDialog]=useState(false);const[autoSaveEnabled]=useState(true);// 🔥 IMPROVED: Cooldown system state\nconst[cooldownStatus,setCooldownStatus]=useState({});// UI state\nconst[activeTab,setActiveTab]=useState('scanner');const[scanHistory,setScanHistory]=useState([]);const[isUIVisible,setIsUIVisible]=useState(true);const[savedCards,setSavedCards]=useState([]);// Edition selection state\nconst[showEditionSelector,setShowEditionSelector]=useState(false);const[availableEditions,setAvailableEditions]=useState([]);const[pendingCardData,setPendingCardData]=useState(null);const[pendingScanMode,setPendingScanMode]=useState(null);const[scanningPausedForSelection,setScanningPausedForSelection]=useState(false);// AI Learning for edition preferences\nconst[editionPreferences,setEditionPreferences]=useState({});// Collection limits and premium features\nconst[isPremiumUser,setIsPremiumUser]=useState(false);const[showPaywallModal,setShowPaywallModal]=useState(false);const FREE_COLLECTION_LIMIT=100;// Camera state with persistence\nconst[cameraError,setCameraError]=useState(null);const[cameraRetryCount,setCameraRetryCount]=useState(0);const[cameraInitializationComplete,setCameraInitializationComplete]=useState(false);const[showCameraSelector,setShowCameraSelector]=useState(false);const[availableCameras,setAvailableCameras]=useState([]);const[selectedCameraId,setSelectedCameraId]=useState(null);// Refs\nconst videoRef=useRef(null);const scanIntervalRef=useRef(null);const visionServiceRef=useRef(null);const cameraStreamRef=useRef(null);const initializationPromiseRef=useRef(null);// 🔥 IMPROVED: Cooldown system ref\nconst cooldownSystemRef=useRef(new MTGScannerCooldown());// Initialize services and camera ONCE\nuseEffect(()=>{console.log('🔧 Component mounting - initializing services...');initializeServices();loadSavedData();// Initialize camera ONCE\nif(!initializationPromiseRef.current){console.log('🚀 Starting PERSISTENT camera initialization...');initializationPromiseRef.current=enumerateCameras().then(()=>setupCamera());}// Update cooldown status periodically\nconst cooldownUpdateInterval=setInterval(()=>{setCooldownStatus(cooldownSystemRef.current.getCooldownStatus());},1000);return()=>{console.log('🧹 Component unmounting - cleaning up...');clearInterval(cooldownUpdateInterval);cleanup();};},[]);// Handle tab switching without stopping camera\nuseEffect(()=>{console.log(\"\\uD83C\\uDFAF Tab switched to: \".concat(activeTab));if(activeTab==='scanner'&&cameraStreamRef.current&&cameraStreamRef.current.active){console.log('🎯 Scanner tab active, ensuring video connection...');if(videoRef.current&&!videoRef.current.srcObject){console.log('📷 Reconnecting video element to persistent stream...');videoRef.current.srcObject=cameraStreamRef.current;videoRef.current.play();}}if(activeTab!=='scanner'&&isScanning){console.log('⏸️ Pausing scanning - left scanner tab (camera stays active)');stopScanning();}},[activeTab,isScanning]);const initializeServices=()=>{console.log('🔧 Initializing MTG Scanner Pro...');try{visionServiceRef.current=new ClaudeVisionService();// YOUR ACTUAL SERVICE\nconsole.log('✅ Gemini Vision Service initialized successfully');}catch(error){console.error('❌ Service initialization failed:',error);}};const loadSavedData=()=>{try{const saved=localStorage.getItem('mtg_saved_cards');if(saved){setSavedCards(JSON.parse(saved));console.log('📁 Loaded saved cards from storage');}const preferences=localStorage.getItem('mtg_edition_preferences');if(preferences){setEditionPreferences(JSON.parse(preferences));console.log('🧠 Loaded edition preferences for AI learning');}const premiumStatus=localStorage.getItem('mtg_premium_status');if(premiumStatus==='true'){setIsPremiumUser(true);console.log('💎 Premium user status loaded');}}catch(error){console.error('❌ Failed to load saved data:',error);}};// Camera enumeration (keep your existing camera logic)\nconst enumerateCameras=async()=>{try{const devices=await navigator.mediaDevices.enumerateDevices();const videoDevices=devices.filter(device=>device.kind==='videoinput');console.log('📷 Available cameras:',videoDevices.length);videoDevices.forEach((device,index)=>{console.log(\"   \".concat(index+1,\". \").concat(device.label||\"Camera \".concat(index+1),\" (\").concat(device.deviceId,\")\"));});setAvailableCameras(videoDevices);// Auto-select Logitech C920 if available\nconst logitechCamera=videoDevices.find(device=>device.label.toLowerCase().includes('logitech')||device.label.toLowerCase().includes('c920'));if(logitechCamera){setSelectedCameraId(logitechCamera.deviceId);console.log('✅ Auto-selected Logitech C920:',logitechCamera.label);}else if(videoDevices.length>0){setSelectedCameraId(videoDevices[0].deviceId);console.log('✅ Auto-selected first camera:',videoDevices[0].label);}}catch(error){console.error('❌ Failed to enumerate cameras:',error);}};// Keep your existing camera setup logic\nconst setupCamera=async function(){let deviceId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;console.log('🎥 Setting up PERSISTENT camera for MTG Scanner Pro...');setCameraStatus('requesting');setCameraError(null);try{if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia){throw new Error('Camera API not supported in this browser');}if(availableCameras.length===0){await enumerateCameras();}if(cameraStreamRef.current&&cameraStreamRef.current.active){console.log('📷 Camera stream already active, reusing persistent stream...');if(videoRef.current&&!videoRef.current.srcObject){videoRef.current.srcObject=cameraStreamRef.current;videoRef.current.play();}setCameraStatus('ready');setCameraInitializationComplete(true);console.log('✅ Camera reused successfully - PERSISTENT MODE ACTIVE');return;}let stream=null;const useDeviceId=deviceId||selectedCameraId;try{let constraints;if(useDeviceId){console.log('📷 Using selected camera:',useDeviceId);constraints={video:{deviceId:{exact:useDeviceId},width:{ideal:1280},height:{ideal:720},frameRate:{ideal:30}},audio:false};}else{console.log('📷 Using default camera constraints...');constraints={video:{width:{ideal:1280,min:320},height:{ideal:720,min:240},facingMode:{ideal:'environment'},frameRate:{ideal:30}},audio:false};}stream=await navigator.mediaDevices.getUserMedia(constraints);console.log('✅ Camera initialized successfully!');}catch(specificError){console.log('⚠️ Specific camera failed, trying general constraints...');const generalConstraints={video:{width:{ideal:1280,min:320},height:{ideal:720,min:240},facingMode:{ideal:'environment'},frameRate:{ideal:30}},audio:false};stream=await navigator.mediaDevices.getUserMedia(generalConstraints);console.log('✅ Using fallback camera settings');}cameraStreamRef.current=stream;setCameraInitializationComplete(true);if(videoRef.current){videoRef.current.srcObject=stream;videoRef.current.onloadedmetadata=()=>{videoRef.current.play();setCameraStatus('ready');setCameraError(null);setCameraRetryCount(0);console.log('✅ PERSISTENT Camera ready:',\"\".concat(videoRef.current.videoWidth,\"x\").concat(videoRef.current.videoHeight));showProfessionalToast('✅ Camera ready with enhanced cooldown system!','success');};}}catch(error){console.error('❌ Camera setup failed:',error);setCameraStatus('error');handleCameraError(error);}};// Keep your existing camera error handling\nconst handleCameraError=error=>{let errorMessage='';let errorAction='';let canRetry=false;switch(error.name){case'NotAllowedError':errorMessage='Camera permission denied';errorAction='Please allow camera access and click \"Try Again\"';canRetry=true;break;case'NotFoundError':errorMessage='No camera found';errorAction='Please connect a camera or use a device with a camera';canRetry=true;break;case'NotReadableError':errorMessage='Camera is busy';errorAction='Please close other apps using the camera and try again';canRetry=true;break;case'OverconstrainedError':errorMessage='Camera settings not supported';errorAction='Trying with basic camera settings...';canRetry=true;break;default:errorMessage=error.message||'Camera error';errorAction='Please check your camera and try again';canRetry=true;}setCameraError({message:errorMessage,action:errorAction,canRetry});if(canRetry&&cameraRetryCount<2&&error.name!=='NotAllowedError'){const retryDelay=(cameraRetryCount+1)*2000;console.log(\"\\uD83D\\uDD04 Auto-retrying camera setup in \".concat(retryDelay/1000,\"s (attempt \").concat(cameraRetryCount+1,\"/2)\"));setTimeout(()=>{setCameraRetryCount(prev=>prev+1);setupCamera();},retryDelay);}};// 🔥 IMPROVED: Much smarter scanning with detection stability\nconst startScanning=()=>{if(!visionServiceRef.current||cameraStatus!=='ready'){console.log('⚠️ MTG Scanner not ready');if(cameraStatus==='error'){showProfessionalToast('❌ Camera not ready. Please fix camera issues first.','error');}return;}console.log(\"\\u25B6\\uFE0F Starting MTG Scanner Pro with IMPROVED Cooldown - \".concat(scanMode,\" mode...\"));setIsScanning(true);setScanningPausedForSelection(false);// 🔥 Reset cooldowns when starting scanning\ncooldownSystemRef.current.resetCooldowns();setCooldownStatus(cooldownSystemRef.current.getCooldownStatus());if(scanMode==='continuous'){setContinuousCount(0);console.log('🔄 Continuous mode: Reset counter to 0');}// 🔥 IMPROVED: Less aggressive scanning interval with stability detection\nscanIntervalRef.current=setInterval(async()=>{try{// 🔥 Check cooldown system first\nconst currentCardName=currentCard===null||currentCard===void 0?void 0:currentCard.cardName;if(!cooldownSystemRef.current.shouldScan(currentCardName)){// Update cooldown status for UI\nsetCooldownStatus(cooldownSystemRef.current.getCooldownStatus());return;// Skip this frame due to cooldown\n}// Don't scan if edition selector is showing\nif(scanningPausedForSelection||showEditionSelector){console.log('⏸️ Scanning paused for edition selection');cooldownSystemRef.current.setEditionSelectorOpen(true);return;}else{cooldownSystemRef.current.setEditionSelectorOpen(false);}console.log(\"🔄 Processing frame for MTG CARD IDENTIFICATION...\");// Call your actual vision service\nconst result=await visionServiceRef.current.processVideoFrame(videoRef.current);if(result&&result.hasCard&&result.confidence>=85){// Higher confidence threshold\nconsole.log('🎯 High-confidence MTG Card detected:',result.cardName,\"(\".concat(result.confidence,\"%)\"));// 🔥 Add to stability buffer before processing\nconst isStable=cooldownSystemRef.current.addDetection(result.cardName,result.confidence);if(isStable){console.log('✅ Card detection is STABLE, processing...');// 🔥 Record detection in cooldown system\ncooldownSystemRef.current.recordDetection(result.cardName);setCooldownStatus(cooldownSystemRef.current.getCooldownStatus());// Stop scanning in single mode when card detected\nif(scanMode==='single'){stopScanning();}// Always check for multiple editions\nawait handleCardDetection(result);}else{console.log('⏳ Card detection not stable yet, need more consistent readings...');}}else if(result&&!result.hasCard){setScanResult({hasCard:false,message:result.message||'No MTG card detected'});setCurrentCard(null);}// Update cooldown status\nsetCooldownStatus(cooldownSystemRef.current.getCooldownStatus());}catch(error){console.error('❌ Scanning error:',error);setScanResult({hasCard:false,message:'Scanner error - please try again'});}},scanMode==='single'?1500:3000);// 🔥 SLOWER intervals (was 500/1000)\n};// Keep your existing card detection logic but with stability\nconst handleCardDetection=async detectedCard=>{try{console.log('🎭 Checking for multiple editions of:',detectedCard.cardName);const cardName=detectedCard.cardName.trim();const searchQuery=\"!\\\"\".concat(cardName,\"\\\"\");const encodedQuery=encodeURIComponent(searchQuery);console.log('🔍 Scryfall search query:',searchQuery);const editionsResponse=await fetch(\"https://api.scryfall.com/cards/search?q=\".concat(encodedQuery,\"&unique=prints&order=released&dir=desc\"));if(editionsResponse.ok){const editionsData=await editionsResponse.json();const editions=editionsData.data||[];console.log(\"\\uD83D\\uDCCA Scryfall returned \".concat(editions.length,\" total results\"));const exactMatches=editions.filter(card=>{const cardNameNormalized=card.name.toLowerCase().trim();const searchNameNormalized=cardName.toLowerCase().trim();return cardNameNormalized===searchNameNormalized;});console.log(\"\\uD83C\\uDFAF Found \".concat(exactMatches.length,\" exact name matches for \\\"\").concat(cardName,\"\\\"\"));exactMatches.forEach((card,index)=>{console.log(\"   \".concat(index+1,\". \").concat(card.set_name,\" (\").concat(card.set.toUpperCase(),\") - \").concat(card.released_at));});if(exactMatches.length>1){// 🔥 Only show edition selector if NOT in cooldown\nif(cooldownSystemRef.current.shouldScan()){console.log(\"\\uD83C\\uDFAD Multiple editions found - showing selector\");setScanningPausedForSelection(true);cooldownSystemRef.current.setEditionSelectorOpen(true);const sortedEditions=sortEditionsByPreference(cardName,exactMatches);setPendingCardData(detectedCard);setPendingScanMode(scanMode);setAvailableEditions(sortedEditions);setShowEditionSelector(true);setScanResult(null);setCurrentCard(null);return;}else{console.log(\"\\uD83D\\uDD04 Multiple editions found but in cooldown, using first edition\");const enhancedCard=enhanceCardWithScryfall(detectedCard,exactMatches[0]);displayCard(enhancedCard);}}else if(exactMatches.length===1){console.log(\"\\u2705 Single edition found: \".concat(exactMatches[0].set_name,\" (\").concat(exactMatches[0].set.toUpperCase(),\")\"));const enhancedCard=enhanceCardWithScryfall(detectedCard,exactMatches[0]);displayCard(enhancedCard);if(scanMode==='continuous'&&autoSaveEnabled){const saved=await saveCardToCollection(enhancedCard);if(saved){console.log(\"\\uD83D\\uDCBE AUTO-SAVED: \".concat(enhancedCard.cardName,\" to collection\"));handleContinuousCounterAndLimit();}}}else{console.log('⚠️ No exact Scryfall matches found, using original detection');displayCard(detectedCard);if(scanMode==='continuous'&&autoSaveEnabled){const saved=await saveCardToCollection(detectedCard);if(saved){console.log(\"\\uD83D\\uDCBE AUTO-SAVED: \".concat(detectedCard.cardName,\" to collection (no Scryfall match)\"));handleContinuousCounterAndLimit();}}}}else{const errorText=await editionsResponse.text();console.log('❌ Scryfall API error:',editionsResponse.status,errorText);displayCard(detectedCard);}}catch(error){console.error('❌ Edition lookup error:',error);displayCard(detectedCard);}};// Keep all your existing helper functions...\nconst sortEditionsByPreference=(cardName,editions)=>{const cardKey=cardName.toLowerCase().trim();const userPreference=editionPreferences[cardKey];if(userPreference){console.log(\"\\uD83E\\uDDE0 AI Learning: User previously preferred \".concat(userPreference,\" for \").concat(cardName));return editions.sort((a,b)=>{if(a.set===userPreference)return-1;if(b.set===userPreference)return 1;return 0;});}return editions;};const handleEditionSelected=async selectedEdition=>{if(pendingCardData&&selectedEdition){const enhancedCard=enhanceCardWithScryfall(pendingCardData,selectedEdition);displayCard(enhancedCard);console.log(\"\\u2705 User selected: \".concat(selectedEdition.set_name,\" (\").concat(selectedEdition.set.toUpperCase(),\")\"));learnEditionPreference(pendingCardData.cardName,selectedEdition);if(pendingScanMode==='continuous'&&autoSaveEnabled){const saved=await saveCardToCollection(enhancedCard);if(saved){console.log(\"\\uD83D\\uDCBE AUTO-SAVED: \".concat(enhancedCard.cardName,\" to collection\"));handleContinuousCounterAndLimit();}if(continuousCount<9){console.log('🔄 Resuming continuous scanning after edition selection...');setTimeout(()=>{setScanningPausedForSelection(false);cooldownSystemRef.current.setEditionSelectorOpen(false);if(!isScanning){startScanning();}},2000);// 🔥 Longer delay before resuming\n}}}// 🔥 Close edition selector and notify cooldown system\nsetShowEditionSelector(false);setAvailableEditions([]);setPendingCardData(null);setPendingScanMode(null);setScanningPausedForSelection(false);cooldownSystemRef.current.setEditionSelectorOpen(false);setCooldownStatus(cooldownSystemRef.current.getCooldownStatus());};const handleEditionCancelled=async()=>{if(pendingCardData){displayCard(pendingCardData);if(pendingScanMode==='continuous'&&autoSaveEnabled){const saved=await saveCardToCollection(pendingCardData);if(saved){console.log(\"\\uD83D\\uDCBE AUTO-SAVED: \".concat(pendingCardData.cardName,\" to collection (cancelled edition selection)\"));handleContinuousCounterAndLimit();}if(continuousCount<9){console.log('🔄 Resuming continuous scanning after cancellation...');setTimeout(()=>{setScanningPausedForSelection(false);cooldownSystemRef.current.setEditionSelectorOpen(false);if(!isScanning){startScanning();}},2000);// 🔥 Longer delay\n}}}// 🔥 Close edition selector and notify cooldown system\nsetShowEditionSelector(false);setAvailableEditions([]);setPendingCardData(null);setPendingScanMode(null);setScanningPausedForSelection(false);cooldownSystemRef.current.setEditionSelectorOpen(false);setCooldownStatus(cooldownSystemRef.current.getCooldownStatus());};// Keep all your other existing functions...\nconst learnEditionPreference=(cardName,selectedEdition)=>{const cardKey=cardName.toLowerCase().trim();const newPreferences=_objectSpread(_objectSpread({},editionPreferences),{},{[cardKey]:selectedEdition.set});setEditionPreferences(newPreferences);localStorage.setItem('mtg_edition_preferences',JSON.stringify(newPreferences));console.log(\"\\uD83E\\uDDE0 AI Learning: Remembered \".concat(selectedEdition.set_name,\" preference for \").concat(cardName));};const handleContinuousCounterAndLimit=()=>{const newCount=continuousCount+1;setContinuousCount(newCount);if(newCount>=10){console.log('🛑 CONTINUOUS MODE: 10-card limit reached, pausing...');stopScanning();setShowContinueDialog(true);}};const handleContinueScanning=()=>{console.log('🔄 User chose to continue scanning...');setShowContinueDialog(false);setContinuousCount(0);// 🔥 Reset cooldowns when continuing\ncooldownSystemRef.current.resetCooldowns();startScanning();};const handleStopScanning=()=>{console.log('⏹️ User chose to stop scanning at 10-card limit');setShowContinueDialog(false);setContinuousCount(0);};const enhanceCardWithScryfall=(originalCard,scryfallCard)=>{var _scryfallCard$image_u,_scryfallCard$image_u2;return _objectSpread(_objectSpread({},originalCard),{},{cardType:scryfallCard.type_line,manaCost:scryfallCard.mana_cost,setInfo:scryfallCard.set_name,rarity:scryfallCard.rarity,scryfallId:scryfallCard.id,scryfallImageUrl:((_scryfallCard$image_u=scryfallCard.image_uris)===null||_scryfallCard$image_u===void 0?void 0:_scryfallCard$image_u.normal)||((_scryfallCard$image_u2=scryfallCard.image_uris)===null||_scryfallCard$image_u2===void 0?void 0:_scryfallCard$image_u2.large),scryfallUri:scryfallCard.scryfall_uri,prices:scryfallCard.prices,collectorNumber:scryfallCard.collector_number,releaseDate:scryfallCard.released_at,scryfallVerified:true,setCode:scryfallCard.set});};const displayCard=card=>{setCurrentCard(card);setScanResult(card);setScanHistory(prev=>{const isDuplicate=prev.some(historyCard=>historyCard.cardName===card.cardName&&Math.abs(new Date(historyCard.timestamp)-new Date(card.timestamp))<5000);if(!isDuplicate){return[card,...prev.slice(0,19)];}return prev;});};// Stop scanning but keep camera active\nconst stopScanning=()=>{console.log('⏹️ Stopping MTG Scanner (camera stays active for persistence)...');setIsScanning(false);setScanningPausedForSelection(false);if(scanIntervalRef.current){clearInterval(scanIntervalRef.current);scanIntervalRef.current=null;}console.log('📷 Camera stream preserved for tab persistence');};// Only cleanup camera on component unmount\nconst cleanup=()=>{console.log('🧹 Cleaning up MTG Scanner...');stopScanning();if(cameraStreamRef.current){console.log('📷 Stopping persistent camera stream...');cameraStreamRef.current.getTracks().forEach(track=>track.stop());cameraStreamRef.current=null;setCameraInitializationComplete(false);}if(videoRef.current&&videoRef.current.srcObject){const tracks=videoRef.current.srcObject.getTracks();tracks.forEach(track=>track.stop());videoRef.current.srcObject=null;}initializationPromiseRef.current=null;};// Collection management\nconst saveCardToCollection=async card=>{try{if(!isPremiumUser&&savedCards.length>=FREE_COLLECTION_LIMIT){console.log('🚨 Free collection limit reached');setShowPaywallModal(true);return false;}const cardWithId=_objectSpread(_objectSpread({},card),{},{id:Date.now()+Math.random(),addedAt:new Date().toISOString(),scannedAt:new Date().toLocaleString()});const updatedCards=[cardWithId,...savedCards];setSavedCards(updatedCards);localStorage.setItem('mtg_saved_cards',JSON.stringify(updatedCards));console.log('💾 Card saved to collection:',card.cardName);if(scanMode==='single'){setScanResult(prev=>_objectSpread(_objectSpread({},prev),{},{savedToCollection:true,message:\"\\u2705 \".concat(card.cardName,\" saved to collection!\")}));setTimeout(()=>{setScanResult(prev=>_objectSpread(_objectSpread({},prev),{},{savedToCollection:false,message:undefined}));},3000);}return true;}catch(error){console.error('❌ Failed to save card:',error);setScanResult(prev=>_objectSpread(_objectSpread({},prev),{},{message:\"\\u274C Failed to save \".concat(card.cardName)}));return false;}};const handleUpgradeToPremium=()=>{console.log('💎 Initiating PayPal payment for premium upgrade...');const paypalLink=\"https://www.paypal.com/paypalme/thediceyguy/9.99?country.x=US&locale.x=en_US\";window.open(paypalLink,'_blank');setTimeout(()=>{setIsPremiumUser(true);localStorage.setItem('mtg_premium_status','true');setShowPaywallModal(false);showProfessionalToast('💎 Premium upgrade successful! Unlimited collection storage activated.','success');},5000);};const removeCardFromCollection=cardId=>{try{const updatedCards=savedCards.filter(card=>card.id!==cardId);setSavedCards(updatedCards);localStorage.setItem('mtg_saved_cards',JSON.stringify(updatedCards));console.log('🗑️ Card removed from collection');}catch(error){console.error('❌ Failed to remove card:',error);}};const openCardInScryfall=card=>{if(card&&card.cardName){const searchUrl=\"https://scryfall.com/search?q=\".concat(encodeURIComponent(card.cardName));window.open(searchUrl,'_blank');console.log('🔗 Opening Scryfall for:',card.cardName);}};const toggleUIVisibility=()=>{setIsUIVisible(!isUIVisible);console.log('👁️ UI visibility toggled:',!isUIVisible);};const handleCameraSwitch=async newCameraId=>{console.log('🔄 Switching to camera:',newCameraId);// Stop current stream\nif(cameraStreamRef.current){cameraStreamRef.current.getTracks().forEach(track=>track.stop());cameraStreamRef.current=null;}// Set new camera\nsetSelectedCameraId(newCameraId);setCameraInitializationComplete(false);// Restart with new camera\nawait setupCamera(newCameraId);setShowCameraSelector(false);showProfessionalToast('📷 Camera switched successfully!','success');};const refreshCameraList=async()=>{console.log('🔄 Refreshing camera list...');await enumerateCameras();showProfessionalToast('📷 Camera list refreshed!','success');};const retryCameraSetup=()=>{console.log('🔄 Manual camera retry requested');setCameraRetryCount(0);setCameraError(null);setCameraInitializationComplete(false);initializationPromiseRef.current=null;setupCamera();};// Tab switching handler that preserves camera\nconst handleTabSwitch=newTab=>{console.log(\"\\uD83D\\uDD04 Switching from \".concat(activeTab,\" to \").concat(newTab,\" (camera preserved)\"));setActiveTab(newTab);if(newTab==='scanner'&&cameraStreamRef.current&&videoRef.current){setTimeout(()=>{if(!videoRef.current.srcObject){console.log('📷 Reconnecting video element to persistent camera stream...');videoRef.current.srcObject=cameraStreamRef.current;videoRef.current.play();}},100);}};// 🔥 PROFESSIONAL: Updated cooldown status renderer\nconst renderCooldownStatus=()=>{return/*#__PURE__*/_jsx(ProfessionalCooldownStatus,{cooldownStatus:cooldownStatus,isVisible:activeTab==='scanner'});};// Return the professional JSX structure\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"mtg-scanner-pro\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"app-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"app-title-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"app-logo\",children:[\"MTG\",/*#__PURE__*/_jsx(\"br\",{}),\"SCAN\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-title\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"MTG Scanner Pro\"}),/*#__PURE__*/_jsx(\"span\",{className:\"app-subtitle\",children:\"\\uD83D\\uDD25 Enhanced Smart Cooldown System \\u2022 Professional Grade\"})]})]}),/*#__PURE__*/_jsx(ProfessionalStats,{accuracy:98,scannedCount:scanHistory.length,savedCount:savedCards.length,aiLearned:Object.keys(editionPreferences).length,isPremium:isPremiumUser,cooldownActive:!cooldownStatus.canScan})]}),/*#__PURE__*/_jsx(ProfessionalTabs,{activeTab:activeTab,onTabChange:handleTabSwitch,savedCards:savedCards,isPremium:isPremiumUser}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[activeTab==='scanner'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"scanner-section glass-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"video-container\",children:[/*#__PURE__*/_jsx(\"video\",{ref:videoRef,className:\"scanner-video\",autoPlay:true,playsInline:true,muted:true}),renderCooldownStatus(),/*#__PURE__*/_jsx(ProfessionalCameraStatus,{cameraStatus:cameraStatus,cameraInitialized:cameraInitializationComplete}),cameraError&&/*#__PURE__*/_jsx(\"div\",{className:\"camera-error-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"camera-error-card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDCF9 Camera Issue\"}),/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(\"strong\",{children:cameraError.message})}),/*#__PURE__*/_jsx(\"p\",{children:cameraError.action}),cameraError.canRetry&&/*#__PURE__*/_jsx(\"button\",{onClick:retryCameraSetup,className:\"retry-camera-btn\",children:\"\\uD83D\\uDD04 Try Again\"})]})}),isScanning&&/*#__PURE__*/_jsxs(\"div\",{className:\"scanning-overlay\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"scan-frame \".concat(scanningPausedForSelection?'paused':'')}),/*#__PURE__*/_jsxs(\"div\",{className:\"scan-instructions\",children:[scanningPausedForSelection?'⏸️ Scanner paused for edition selection':'🔍 Position MTG card in frame',/*#__PURE__*/_jsx(\"div\",{className:\"scan-tech\",children:\"\\uD83D\\uDD25 Enhanced smart cooldown active\"})]})]})]}),/*#__PURE__*/_jsx(ProfessionalScanControls,{scanMode:scanMode,setScanMode:setScanMode,isScanning:isScanning,onStartScanning:startScanning,onStopScanning:stopScanning,cameraStatus:cameraStatus,showEditionSelector:showEditionSelector,scanningPausedForSelection:scanningPausedForSelection,cooldownStatus:cooldownStatus})]}),isUIVisible&&/*#__PURE__*/_jsxs(\"div\",{className:\"card-info-section glass-card\",children:[/*#__PURE__*/_jsx(ProfessionalCardResult,{scanResult:scanResult,currentCard:currentCard,onSaveCard:saveCardToCollection,onOpenScryfall:openCardInScryfall}),scanHistory.length>0&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'24px'},children:[/*#__PURE__*/_jsx(\"h4\",{style:{color:'#4a90e2',marginBottom:'16px',fontSize:'16px'},children:\"\\uD83D\\uDCCA Recent Scans\"}),/*#__PURE__*/_jsx(\"div\",{style:{maxHeight:'200px',overflowY:'auto'},className:\"scrollable\",children:scanHistory.map((card,index)=>/*#__PURE__*/_jsxs(\"div\",{style:{padding:'12px',margin:'8px 0',background:'rgba(74, 144, 226, 0.1)',borderRadius:'8px',fontSize:'13px',display:'flex',justifyContent:'space-between',alignItems:'center',border:'1px solid rgba(74, 144, 226, 0.2)'},children:[/*#__PURE__*/_jsx(\"span\",{style:{fontWeight:'600'},children:card.cardName}),/*#__PURE__*/_jsxs(\"span\",{style:{color:'#64b5f6',fontWeight:'700'},children:[card.confidence,\"%\"]})]},index))})]})]})]}),activeTab==='deck'&&/*#__PURE__*/_jsx(\"div\",{className:\"glass-card\",style:{padding:'32px',width:'100%'},children:/*#__PURE__*/_jsx(DeckManager,{savedCards:savedCards,onRemoveCard:removeCardFromCollection,onOpenScryfall:openCardInScryfall,scanHistory:scanHistory,isPremiumUser:isPremiumUser,collectionLimit:FREE_COLLECTION_LIMIT,onUpgrade:handleUpgradeToPremium})}),activeTab==='knowledge'&&/*#__PURE__*/_jsx(\"div\",{className:\"glass-card\",style:{padding:'32px',width:'100%'},children:/*#__PURE__*/_jsx(MTGKnowledgeBase,{currentCard:currentCard,savedCards:savedCards,editionPreferences:editionPreferences})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-bar glass-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"status-left\",children:scanHistory.length>0&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"span\",{className:\"status-item\",children:[\"\\uD83D\\uDCCA Scanned: \",scanHistory.length]}),currentCard&&/*#__PURE__*/_jsxs(\"span\",{className:\"status-item\",children:[\"\\uD83C\\uDFAF Last: \",currentCard.cardName,\" (\",currentCard.confidence,\"%)\"]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-right\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"footer-logo\",children:\"MTG Scanner Pro\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"status-item\",children:[\"\\uD83D\\uDD25 Enhanced Cooldown: \",cooldownStatus.canScan?'Ready':'Active']}),/*#__PURE__*/_jsxs(\"span\",{className:\"status-item\",children:[\"\\uD83D\\uDCF7 Camera: \",cameraStatus==='ready'?'Ready ✅':'Initializing ⏳']}),/*#__PURE__*/_jsx(\"span\",{className:\"status-item\",children:\"\\uD83E\\uDDE0 AI: Gemini Vision\"}),/*#__PURE__*/_jsx(\"span\",{className:\"status-item\",children:isPremiumUser?'💎 Premium':'🆓 Free'})]})]}),showEditionSelector&&/*#__PURE__*/_jsx(ProfessionalEditionSelector,{cardName:pendingCardData===null||pendingCardData===void 0?void 0:pendingCardData.cardName,availableEditions:availableEditions,onEditionSelected:handleEditionSelected,onCancel:handleEditionCancelled,aiRecommendation:editionPreferences[pendingCardData===null||pendingCardData===void 0?void 0:(_pendingCardData$card=pendingCardData.cardName)===null||_pendingCardData$card===void 0?void 0:(_pendingCardData$card2=_pendingCardData$card.toLowerCase())===null||_pendingCardData$card2===void 0?void 0:_pendingCardData$card2.trim()]}),showPaywallModal&&/*#__PURE__*/_jsx(\"div\",{className:\"modal-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDC8E Upgrade to Premium\"}),/*#__PURE__*/_jsx(\"div\",{style:{margin:'20px 0',fontSize:'18px'},children:/*#__PURE__*/_jsxs(\"p\",{style:{margin:'8px 0',lineHeight:'1.5'},children:[\"You've reached the \",/*#__PURE__*/_jsxs(\"strong\",{children:[FREE_COLLECTION_LIMIT,\" card limit\"]}),\" for free users!\"]})}),/*#__PURE__*/_jsxs(\"div\",{style:{background:'rgba(74, 144, 226, 0.1)',padding:'20px',borderRadius:'10px',margin:'20px 0'},children:[/*#__PURE__*/_jsx(\"h4\",{style:{margin:'0 0 15px 0',color:'#4a90e2'},children:\"Premium Features:\"}),/*#__PURE__*/_jsxs(\"ul\",{style:{textAlign:'left',lineHeight:'1.8',margin:0,paddingLeft:'20px'},children:[/*#__PURE__*/_jsxs(\"li\",{children:[\"\\uD83D\\uDD25 \",/*#__PURE__*/_jsx(\"strong\",{children:\"Unlimited collection storage\"})]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"\\uD83E\\uDDE0 \",/*#__PURE__*/_jsx(\"strong\",{children:\"Advanced AI learning\"})]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"\\uD83D\\uDCCA \",/*#__PURE__*/_jsx(\"strong\",{children:\"Collection analytics\"})]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"\\uD83D\\uDCB0 \",/*#__PURE__*/_jsx(\"strong\",{children:\"Price tracking & alerts\"})]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"\\uD83C\\uDFAF \",/*#__PURE__*/_jsx(\"strong\",{children:\"Deck optimization tools\"})]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"\\u26A1 \",/*#__PURE__*/_jsx(\"strong\",{children:\"Priority customer support\"})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleUpgradeToPremium,className:\"modal-btn primary\",children:\"\\uD83D\\uDC8E Upgrade for $9.99/month\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowPaywallModal(false),className:\"modal-btn secondary\",children:\"Maybe Later\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'20px',paddingTop:'20px',borderTop:'1px solid #444',fontSize:'12px',color:'#ccc'},children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\uD83D\\uDCB3 Secure payment via PayPal\"}),/*#__PURE__*/_jsx(\"p\",{children:\"\\uD83D\\uDCE7 Payment to: thediceyguy@gmail.com\"}),/*#__PURE__*/_jsx(\"p\",{children:\"\\uD83D\\uDD12 Cancel anytime, no long-term commitment\"})]})]})}),showContinueDialog&&/*#__PURE__*/_jsx(\"div\",{className:\"modal-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDD25 10 Cards Scanned with Smart Cooldown!\"}),/*#__PURE__*/_jsxs(\"p\",{style:{margin:'8px 0',lineHeight:'1.5'},children:[\"You've successfully scanned \",/*#__PURE__*/_jsx(\"strong\",{children:\"10 cards\"}),\" with the enhanced cooldown system.\"]}),/*#__PURE__*/_jsxs(\"p\",{style:{margin:'8px 0',lineHeight:'1.5'},children:[\"AI learned \",/*#__PURE__*/_jsx(\"strong\",{children:Object.keys(editionPreferences).length}),\" edition preferences.\"]}),/*#__PURE__*/_jsxs(\"p\",{style:{margin:'8px 0',lineHeight:'1.5'},children:[\"Total saved to collection: \",/*#__PURE__*/_jsx(\"strong\",{children:savedCards.length}),\" cards\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleContinueScanning,className:\"modal-btn primary\",children:\"\\uD83D\\uDD25 Continue Smart Scanning\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleStopScanning,className:\"modal-btn secondary\",children:\"\\u23F9\\uFE0F Stop & Review Collection\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'space-around',marginTop:'16px',paddingTop:'16px',borderTop:'1px solid #444',fontSize:'12px',color:'#ccc'},children:[/*#__PURE__*/_jsxs(\"span\",{children:[\"\\uD83D\\uDD25 Smart scans: \",continuousCount]}),/*#__PURE__*/_jsxs(\"span\",{children:[\"\\uD83E\\uDDE0 AI learned: \",Object.keys(editionPreferences).length]}),/*#__PURE__*/_jsxs(\"span\",{children:[\"\\uD83D\\uDCC1 Collection: \",savedCards.length,\" total\"]})]})]})}),showCameraSelector&&/*#__PURE__*/_jsx(\"div\",{className:\"modal-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDCF7 Camera Settings\"}),/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'20px',textAlign:'left'},children:[/*#__PURE__*/_jsx(\"p\",{style:{margin:'0 0 15px 0',fontSize:'14px',color:'#ccc'},children:\"Select your preferred camera for MTG card scanning:\"}),availableCameras.length===0?/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px',background:'rgba(220, 53, 69, 0.1)',border:'1px solid #dc3545',borderRadius:'8px',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"p\",{style:{margin:'0 0 10px 0',color:'#dc3545'},children:\"\\u274C No cameras detected\"}),/*#__PURE__*/_jsx(\"button\",{onClick:refreshCameraList,className:\"modal-btn primary\",children:\"\\uD83D\\uDD04 Refresh Camera List\"})]}):/*#__PURE__*/_jsx(\"div\",{style:{maxHeight:'300px',overflowY:'auto'},children:availableCameras.map((camera,index)=>/*#__PURE__*/_jsx(\"div\",{onClick:()=>handleCameraSwitch(camera.deviceId),style:{padding:'12px',margin:'8px 0',background:selectedCameraId===camera.deviceId?'rgba(74, 144, 226, 0.3)':'rgba(255,255,255,0.1)',border:selectedCameraId===camera.deviceId?'2px solid #4a90e2':'1px solid #666',borderRadius:'6px',cursor:'pointer',transition:'all 0.2s'},children:/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',justifyContent:'space-between'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{style:{fontWeight:'600',marginBottom:'4px'},children:[\"\\uD83D\\uDCF7 \",camera.label||\"Camera \".concat(index+1)]}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'12px',color:'#ccc'},children:[camera.deviceId.substring(0,20),\"...\"]})]}),selectedCameraId===camera.deviceId&&/*#__PURE__*/_jsx(\"div\",{style:{color:'#4a90e2',fontWeight:'bold'},children:\"\\u2705 Active\"})]})},camera.deviceId))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:refreshCameraList,className:\"modal-btn secondary\",children:\"\\uD83D\\uDD04 Refresh\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowCameraSelector(false),className:\"modal-btn primary\",children:\"\\u2705 Close\"})]}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:'15px',fontSize:'12px',color:'#999',textAlign:'center'},children:\"\\uD83D\\uDCA1 Tip: Higher resolution cameras (1080p+) work best for card recognition\"})]})})]});};export default Scanner;","map":{"version":3,"names":["React","useState","useRef","useEffect","ClaudeVisionService","CardDisplayUI","DeckManager","MTGKnowledgeBase","EditionSelector","ProfessionalCooldownStatus","ProfessionalCameraStatus","ProfessionalScanControls","ProfessionalCardResult","ProfessionalEditionSelector","ProfessionalStats","showProfessionalToast","ProfessionalTabs","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","MTGScannerCooldown","constructor","lastDetectedCard","lastDetectionTime","lastApiCall","consecutiveDetections","isEditionSelectorOpen","detectionBuffer","SAME_CARD_COOLDOWN","MIN_API_INTERVAL","DETECTION_STABILITY","MAX_CONSECUTIVE","LONG_PAUSE_DURATION","isLongPauseActive","longPauseStartTime","shouldScan","cardName","arguments","length","undefined","now","Date","console","log","pauseRemaining","concat","Math","ceil","waitTime","timeSinceLastDetection","addDetection","confidence","push","timestamp","filter","detection","recentSameCard","recordDetection","resetCooldowns","setEditionSelectorOpen","isOpen","getCooldownStatus","longPauseRemaining","max","sameCardCooldown","apiCooldown","canScan","detectionBufferSize","stabilityRequired","Scanner","_pendingCardData$card","_pendingCardData$card2","isScanning","setIsScanning","scanResult","setScanResult","cameraStatus","setCameraStatus","currentCard","setCurrentCard","scanMode","setScanMode","continuousCount","setContinuousCount","showContinueDialog","setShowContinueDialog","autoSaveEnabled","cooldownStatus","setCooldownStatus","activeTab","setActiveTab","scanHistory","setScanHistory","isUIVisible","setIsUIVisible","savedCards","setSavedCards","showEditionSelector","setShowEditionSelector","availableEditions","setAvailableEditions","pendingCardData","setPendingCardData","pendingScanMode","setPendingScanMode","scanningPausedForSelection","setScanningPausedForSelection","editionPreferences","setEditionPreferences","isPremiumUser","setIsPremiumUser","showPaywallModal","setShowPaywallModal","FREE_COLLECTION_LIMIT","cameraError","setCameraError","cameraRetryCount","setCameraRetryCount","cameraInitializationComplete","setCameraInitializationComplete","showCameraSelector","setShowCameraSelector","availableCameras","setAvailableCameras","selectedCameraId","setSelectedCameraId","videoRef","scanIntervalRef","visionServiceRef","cameraStreamRef","initializationPromiseRef","cooldownSystemRef","initializeServices","loadSavedData","current","enumerateCameras","then","setupCamera","cooldownUpdateInterval","setInterval","clearInterval","cleanup","active","srcObject","play","stopScanning","error","saved","localStorage","getItem","JSON","parse","preferences","premiumStatus","devices","navigator","mediaDevices","enumerateDevices","videoDevices","device","kind","forEach","index","label","deviceId","logitechCamera","find","toLowerCase","includes","getUserMedia","Error","stream","useDeviceId","constraints","video","exact","width","ideal","height","frameRate","audio","min","facingMode","specificError","generalConstraints","onloadedmetadata","videoWidth","videoHeight","handleCameraError","errorMessage","errorAction","canRetry","name","message","action","retryDelay","setTimeout","prev","startScanning","currentCardName","result","processVideoFrame","hasCard","isStable","handleCardDetection","detectedCard","trim","searchQuery","encodedQuery","encodeURIComponent","editionsResponse","fetch","ok","editionsData","json","editions","data","exactMatches","card","cardNameNormalized","searchNameNormalized","set_name","set","toUpperCase","released_at","sortedEditions","sortEditionsByPreference","enhancedCard","enhanceCardWithScryfall","displayCard","saveCardToCollection","handleContinuousCounterAndLimit","errorText","text","status","cardKey","userPreference","sort","a","b","handleEditionSelected","selectedEdition","learnEditionPreference","handleEditionCancelled","newPreferences","_objectSpread","setItem","stringify","newCount","handleContinueScanning","handleStopScanning","originalCard","scryfallCard","_scryfallCard$image_u","_scryfallCard$image_u2","cardType","type_line","manaCost","mana_cost","setInfo","rarity","scryfallId","id","scryfallImageUrl","image_uris","normal","large","scryfallUri","scryfall_uri","prices","collectorNumber","collector_number","releaseDate","scryfallVerified","setCode","isDuplicate","some","historyCard","abs","slice","getTracks","track","stop","tracks","cardWithId","random","addedAt","toISOString","scannedAt","toLocaleString","updatedCards","savedToCollection","handleUpgradeToPremium","paypalLink","window","open","removeCardFromCollection","cardId","openCardInScryfall","searchUrl","toggleUIVisibility","handleCameraSwitch","newCameraId","refreshCameraList","retryCameraSetup","handleTabSwitch","newTab","renderCooldownStatus","isVisible","className","children","accuracy","scannedCount","savedCount","aiLearned","Object","keys","isPremium","cooldownActive","onTabChange","ref","autoPlay","playsInline","muted","cameraInitialized","onClick","onStartScanning","onStopScanning","onSaveCard","onOpenScryfall","style","marginTop","color","marginBottom","fontSize","maxHeight","overflowY","map","padding","margin","background","borderRadius","display","justifyContent","alignItems","border","fontWeight","onRemoveCard","collectionLimit","onUpgrade","onEditionSelected","onCancel","aiRecommendation","lineHeight","textAlign","paddingLeft","paddingTop","borderTop","camera","cursor","transition","substring"],"sources":["C:/Users/kim-a/Documents/DiceyTeck/MTG Scanner BACKUP/src/Scanner.js"],"sourcesContent":["// Scanner.js - PROFESSIONAL VERSION with Enhanced UI Components\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport ClaudeVisionService from './ClaudeVisionService';\r\nimport CardDisplayUI from './CardDisplayUI';\r\nimport DeckManager from './DeckManager';\r\nimport MTGKnowledgeBase from './MTGKnowledgeBase';\r\nimport EditionSelector from './EditionSelector';\r\nimport './CardDisplay.css';\r\n\r\n// 🔥 NEW: Import professional components\r\nimport {\r\n    ProfessionalCooldownStatus,\r\n    ProfessionalCameraStatus,\r\n    ProfessionalScanControls,\r\n    ProfessionalCardResult,\r\n    ProfessionalEditionSelector,\r\n    ProfessionalStats,\r\n    showProfessionalToast,\r\n    ProfessionalTabs\r\n} from './ProfessionalComponents';\r\n\r\n// 🔥 IMPROVED Smart Cooldown System\r\nclass MTGScannerCooldown {\r\n    constructor() {\r\n        this.lastDetectedCard = null;\r\n        this.lastDetectionTime = 0;\r\n        this.lastApiCall = 0;\r\n        this.consecutiveDetections = 0;\r\n        this.isEditionSelectorOpen = false;\r\n        this.detectionBuffer = [];\r\n        \r\n        // 🔥 LESS AGGRESSIVE Cooldown periods\r\n        this.SAME_CARD_COOLDOWN = 15000;      // 15 seconds for same card (was 8)\r\n        this.MIN_API_INTERVAL = 4000;         // 4 seconds between API calls (was 2)\r\n        this.DETECTION_STABILITY = 3;         // Need 3 consistent detections\r\n        this.MAX_CONSECUTIVE = 2;             // Max consecutive before pause\r\n        this.LONG_PAUSE_DURATION = 30000;     // 30 second pause after max consecutive\r\n        \r\n        this.isLongPauseActive = false;\r\n        this.longPauseStartTime = 0;\r\n    }\r\n\r\n    // Check if we should scan this frame\r\n    shouldScan(cardName = null) {\r\n        const now = Date.now();\r\n        \r\n        // 1. Don't scan if edition selector is open\r\n        if (this.isEditionSelectorOpen) {\r\n            console.log(\"🚫 Scanning blocked: Edition selector open\");\r\n            return false;\r\n        }\r\n        \r\n        // 2. Check long pause (after too many consecutive detections)\r\n        if (this.isLongPauseActive) {\r\n            const pauseRemaining = this.LONG_PAUSE_DURATION - (now - this.longPauseStartTime);\r\n            if (pauseRemaining > 0) {\r\n                console.log(`🚫 Scanning blocked: Long pause active (${Math.ceil(pauseRemaining/1000)}s remaining)`);\r\n                return false;\r\n            } else {\r\n                // Reset long pause\r\n                this.isLongPauseActive = false;\r\n                this.consecutiveDetections = 0;\r\n                console.log(\"✅ Long pause ended, scanning can resume\");\r\n            }\r\n        }\r\n        \r\n        // 3. Enforce minimum API interval\r\n        if (now - this.lastApiCall < this.MIN_API_INTERVAL) {\r\n            const waitTime = this.MIN_API_INTERVAL - (now - this.lastApiCall);\r\n            console.log(`🚫 Scanning blocked: API cooldown (${Math.ceil(waitTime/1000)}s remaining)`);\r\n            return false;\r\n        }\r\n        \r\n        // 4. Same card cooldown\r\n        if (cardName && cardName === this.lastDetectedCard) {\r\n            const timeSinceLastDetection = now - this.lastDetectionTime;\r\n            if (timeSinceLastDetection < this.SAME_CARD_COOLDOWN) {\r\n                const waitTime = this.SAME_CARD_COOLDOWN - timeSinceLastDetection;\r\n                console.log(`🚫 Scanning blocked: Same card \"${cardName}\" cooldown (${Math.ceil(waitTime/1000)}s remaining)`);\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    // Add detection to buffer for stability checking\r\n    addDetection(cardName, confidence) {\r\n        const now = Date.now();\r\n        \r\n        // Add to buffer\r\n        this.detectionBuffer.push({\r\n            cardName,\r\n            confidence,\r\n            timestamp: now\r\n        });\r\n        \r\n        // Keep only recent detections (last 10 seconds)\r\n        this.detectionBuffer = this.detectionBuffer.filter(\r\n            detection => now - detection.timestamp < 10000\r\n        );\r\n        \r\n        // Check stability - need consistent detections of same card\r\n        const recentSameCard = this.detectionBuffer.filter(\r\n            detection => detection.cardName === cardName\r\n        );\r\n        \r\n        return recentSameCard.length >= this.DETECTION_STABILITY;\r\n    }\r\n\r\n    // Record a successful detection\r\n    recordDetection(cardName) {\r\n        const now = Date.now();\r\n        \r\n        if (cardName === this.lastDetectedCard) {\r\n            this.consecutiveDetections++;\r\n        } else {\r\n            this.consecutiveDetections = 1;\r\n            this.lastDetectedCard = cardName;\r\n        }\r\n        \r\n        this.lastDetectionTime = now;\r\n        this.lastApiCall = now;\r\n        \r\n        // Clear detection buffer after successful detection\r\n        this.detectionBuffer = [];\r\n        \r\n        console.log(`✅ Detection recorded: \"${cardName}\" (consecutive: ${this.consecutiveDetections})`);\r\n        \r\n        // Check if we need to activate long pause\r\n        if (this.consecutiveDetections >= this.MAX_CONSECUTIVE) {\r\n            this.isLongPauseActive = true;\r\n            this.longPauseStartTime = now;\r\n            console.log(`🛑 Too many consecutive detections (${this.MAX_CONSECUTIVE}), activating long pause (${this.LONG_PAUSE_DURATION/1000}s)`);\r\n        }\r\n    }\r\n\r\n    // Reset cooldowns (call when user interaction occurs)\r\n    resetCooldowns() {\r\n        console.log(\"🔄 Cooldowns reset by user interaction\");\r\n        this.consecutiveDetections = 0;\r\n        this.lastDetectedCard = null;\r\n        this.lastDetectionTime = 0;\r\n        this.detectionBuffer = [];\r\n        this.isLongPauseActive = false;\r\n        this.longPauseStartTime = 0;\r\n    }\r\n\r\n    // Set edition selector state\r\n    setEditionSelectorOpen(isOpen) {\r\n        this.isEditionSelectorOpen = isOpen;\r\n        if (isOpen) {\r\n            console.log(\"🎭 Edition selector opened - scanning paused\");\r\n        } else {\r\n            console.log(\"🎭 Edition selector closed - scanning can resume\");\r\n            // Don't reset cooldowns when edition selector closes\r\n        }\r\n    }\r\n\r\n    // Get cooldown status for UI\r\n    getCooldownStatus() {\r\n        const now = Date.now();\r\n        \r\n        let longPauseRemaining = 0;\r\n        if (this.isLongPauseActive) {\r\n            longPauseRemaining = Math.max(0, this.LONG_PAUSE_DURATION - (now - this.longPauseStartTime));\r\n        }\r\n        \r\n        return {\r\n            sameCardCooldown: this.lastDetectedCard ? Math.max(0, this.SAME_CARD_COOLDOWN - (now - this.lastDetectionTime)) : 0,\r\n            apiCooldown: Math.max(0, this.MIN_API_INTERVAL - (now - this.lastApiCall)),\r\n            consecutiveDetections: this.consecutiveDetections,\r\n            longPauseRemaining,\r\n            isEditionSelectorOpen: this.isEditionSelectorOpen,\r\n            canScan: this.shouldScan(this.lastDetectedCard),\r\n            detectionBufferSize: this.detectionBuffer.length,\r\n            stabilityRequired: this.DETECTION_STABILITY\r\n        };\r\n    }\r\n}\r\n\r\nconst Scanner = () => {\r\n    // Core scanner state\r\n    const [isScanning, setIsScanning] = useState(false);\r\n    const [scanResult, setScanResult] = useState(null);\r\n    const [cameraStatus, setCameraStatus] = useState('initializing');\r\n    const [currentCard, setCurrentCard] = useState(null);\r\n    const [scanMode, setScanMode] = useState('continuous');\r\n    \r\n    // Smart scanning state\r\n    const [continuousCount, setContinuousCount] = useState(0);\r\n    const [showContinueDialog, setShowContinueDialog] = useState(false);\r\n    const [autoSaveEnabled] = useState(true);\r\n    \r\n    // 🔥 IMPROVED: Cooldown system state\r\n    const [cooldownStatus, setCooldownStatus] = useState({});\r\n    \r\n    // UI state\r\n    const [activeTab, setActiveTab] = useState('scanner');\r\n    const [scanHistory, setScanHistory] = useState([]);\r\n    const [isUIVisible, setIsUIVisible] = useState(true);\r\n    const [savedCards, setSavedCards] = useState([]);\r\n    \r\n    // Edition selection state\r\n    const [showEditionSelector, setShowEditionSelector] = useState(false);\r\n    const [availableEditions, setAvailableEditions] = useState([]);\r\n    const [pendingCardData, setPendingCardData] = useState(null);\r\n    const [pendingScanMode, setPendingScanMode] = useState(null);\r\n    const [scanningPausedForSelection, setScanningPausedForSelection] = useState(false);\r\n    \r\n    // AI Learning for edition preferences\r\n    const [editionPreferences, setEditionPreferences] = useState({});\r\n    \r\n    // Collection limits and premium features\r\n    const [isPremiumUser, setIsPremiumUser] = useState(false);\r\n    const [showPaywallModal, setShowPaywallModal] = useState(false);\r\n    const FREE_COLLECTION_LIMIT = 100;\r\n    \r\n    // Camera state with persistence\r\n    const [cameraError, setCameraError] = useState(null);\r\n    const [cameraRetryCount, setCameraRetryCount] = useState(0);\r\n    const [cameraInitializationComplete, setCameraInitializationComplete] = useState(false);\r\n    const [showCameraSelector, setShowCameraSelector] = useState(false);\r\n    const [availableCameras, setAvailableCameras] = useState([]);\r\n    const [selectedCameraId, setSelectedCameraId] = useState(null);\r\n    \r\n    // Refs\r\n    const videoRef = useRef(null);\r\n    const scanIntervalRef = useRef(null);\r\n    const visionServiceRef = useRef(null);\r\n    const cameraStreamRef = useRef(null);\r\n    const initializationPromiseRef = useRef(null);\r\n    \r\n    // 🔥 IMPROVED: Cooldown system ref\r\n    const cooldownSystemRef = useRef(new MTGScannerCooldown());\r\n\r\n    // Initialize services and camera ONCE\r\n    useEffect(() => {\r\n        console.log('🔧 Component mounting - initializing services...');\r\n        initializeServices();\r\n        loadSavedData();\r\n        \r\n        // Initialize camera ONCE\r\n        if (!initializationPromiseRef.current) {\r\n            console.log('🚀 Starting PERSISTENT camera initialization...');\r\n            initializationPromiseRef.current = enumerateCameras().then(() => setupCamera());\r\n        }\r\n        \r\n        // Update cooldown status periodically\r\n        const cooldownUpdateInterval = setInterval(() => {\r\n            setCooldownStatus(cooldownSystemRef.current.getCooldownStatus());\r\n        }, 1000);\r\n        \r\n        return () => {\r\n            console.log('🧹 Component unmounting - cleaning up...');\r\n            clearInterval(cooldownUpdateInterval);\r\n            cleanup();\r\n        };\r\n    }, []);\r\n\r\n    // Handle tab switching without stopping camera\r\n    useEffect(() => {\r\n        console.log(`🎯 Tab switched to: ${activeTab}`);\r\n        \r\n        if (activeTab === 'scanner' && cameraStreamRef.current && cameraStreamRef.current.active) {\r\n            console.log('🎯 Scanner tab active, ensuring video connection...');\r\n            if (videoRef.current && !videoRef.current.srcObject) {\r\n                console.log('📷 Reconnecting video element to persistent stream...');\r\n                videoRef.current.srcObject = cameraStreamRef.current;\r\n                videoRef.current.play();\r\n            }\r\n        }\r\n        \r\n        if (activeTab !== 'scanner' && isScanning) {\r\n            console.log('⏸️ Pausing scanning - left scanner tab (camera stays active)');\r\n            stopScanning();\r\n        }\r\n    }, [activeTab, isScanning]);\r\n\r\n    const initializeServices = () => {\r\n        console.log('🔧 Initializing MTG Scanner Pro...');\r\n        \r\n        try {\r\n            visionServiceRef.current = new ClaudeVisionService(); // YOUR ACTUAL SERVICE\r\n            console.log('✅ Gemini Vision Service initialized successfully');\r\n        } catch (error) {\r\n            console.error('❌ Service initialization failed:', error);\r\n        }\r\n    };\r\n\r\n    const loadSavedData = () => {\r\n        try {\r\n            const saved = localStorage.getItem('mtg_saved_cards');\r\n            if (saved) {\r\n                setSavedCards(JSON.parse(saved));\r\n                console.log('📁 Loaded saved cards from storage');\r\n            }\r\n            \r\n            const preferences = localStorage.getItem('mtg_edition_preferences');\r\n            if (preferences) {\r\n                setEditionPreferences(JSON.parse(preferences));\r\n                console.log('🧠 Loaded edition preferences for AI learning');\r\n            }\r\n            \r\n            const premiumStatus = localStorage.getItem('mtg_premium_status');\r\n            if (premiumStatus === 'true') {\r\n                setIsPremiumUser(true);\r\n                console.log('💎 Premium user status loaded');\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Failed to load saved data:', error);\r\n        }\r\n    };\r\n\r\n    // Camera enumeration (keep your existing camera logic)\r\n    const enumerateCameras = async () => {\r\n        try {\r\n            const devices = await navigator.mediaDevices.enumerateDevices();\r\n            const videoDevices = devices.filter(device => device.kind === 'videoinput');\r\n            \r\n            console.log('📷 Available cameras:', videoDevices.length);\r\n            videoDevices.forEach((device, index) => {\r\n                console.log(`   ${index + 1}. ${device.label || `Camera ${index + 1}`} (${device.deviceId})`);\r\n            });\r\n            \r\n            setAvailableCameras(videoDevices);\r\n            \r\n            // Auto-select Logitech C920 if available\r\n            const logitechCamera = videoDevices.find(device => \r\n                device.label.toLowerCase().includes('logitech') || \r\n                device.label.toLowerCase().includes('c920')\r\n            );\r\n            \r\n            if (logitechCamera) {\r\n                setSelectedCameraId(logitechCamera.deviceId);\r\n                console.log('✅ Auto-selected Logitech C920:', logitechCamera.label);\r\n            } else if (videoDevices.length > 0) {\r\n                setSelectedCameraId(videoDevices[0].deviceId);\r\n                console.log('✅ Auto-selected first camera:', videoDevices[0].label);\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Failed to enumerate cameras:', error);\r\n        }\r\n    };\r\n\r\n    // Keep your existing camera setup logic\r\n    const setupCamera = async (deviceId = null) => {\r\n        console.log('🎥 Setting up PERSISTENT camera for MTG Scanner Pro...');\r\n        setCameraStatus('requesting');\r\n        setCameraError(null);\r\n        \r\n        try {\r\n            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\r\n                throw new Error('Camera API not supported in this browser');\r\n            }\r\n\r\n            if (availableCameras.length === 0) {\r\n                await enumerateCameras();\r\n            }\r\n\r\n            if (cameraStreamRef.current && cameraStreamRef.current.active) {\r\n                console.log('📷 Camera stream already active, reusing persistent stream...');\r\n                \r\n                if (videoRef.current && !videoRef.current.srcObject) {\r\n                    videoRef.current.srcObject = cameraStreamRef.current;\r\n                    videoRef.current.play();\r\n                }\r\n                \r\n                setCameraStatus('ready');\r\n                setCameraInitializationComplete(true);\r\n                console.log('✅ Camera reused successfully - PERSISTENT MODE ACTIVE');\r\n                return;\r\n            }\r\n\r\n            let stream = null;\r\n            const useDeviceId = deviceId || selectedCameraId;\r\n            \r\n            try {\r\n                let constraints;\r\n                \r\n                if (useDeviceId) {\r\n                    console.log('📷 Using selected camera:', useDeviceId);\r\n                    constraints = {\r\n                        video: {\r\n                            deviceId: { exact: useDeviceId },\r\n                            width: { ideal: 1280 },\r\n                            height: { ideal: 720 },\r\n                            frameRate: { ideal: 30 }\r\n                        },\r\n                        audio: false\r\n                    };\r\n                } else {\r\n                    console.log('📷 Using default camera constraints...');\r\n                    constraints = {\r\n                        video: {\r\n                            width: { ideal: 1280, min: 320 },\r\n                            height: { ideal: 720, min: 240 },\r\n                            facingMode: { ideal: 'environment' },\r\n                            frameRate: { ideal: 30 }\r\n                        },\r\n                        audio: false\r\n                    };\r\n                }\r\n                \r\n                stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n                console.log('✅ Camera initialized successfully!');\r\n                \r\n            } catch (specificError) {\r\n                console.log('⚠️ Specific camera failed, trying general constraints...');\r\n                \r\n                const generalConstraints = {\r\n                    video: {\r\n                        width: { ideal: 1280, min: 320 },\r\n                        height: { ideal: 720, min: 240 },\r\n                        facingMode: { ideal: 'environment' },\r\n                        frameRate: { ideal: 30 }\r\n                    },\r\n                    audio: false\r\n                };\r\n                \r\n                stream = await navigator.mediaDevices.getUserMedia(generalConstraints);\r\n                console.log('✅ Using fallback camera settings');\r\n            }\r\n            \r\n            cameraStreamRef.current = stream;\r\n            setCameraInitializationComplete(true);\r\n            \r\n            if (videoRef.current) {\r\n                videoRef.current.srcObject = stream;\r\n                videoRef.current.onloadedmetadata = () => {\r\n                    videoRef.current.play();\r\n                    setCameraStatus('ready');\r\n                    setCameraError(null);\r\n                    setCameraRetryCount(0);\r\n                    console.log('✅ PERSISTENT Camera ready:', `${videoRef.current.videoWidth}x${videoRef.current.videoHeight}`);\r\n                    showProfessionalToast('✅ Camera ready with enhanced cooldown system!', 'success');\r\n                };\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Camera setup failed:', error);\r\n            setCameraStatus('error');\r\n            handleCameraError(error);\r\n        }\r\n    };\r\n\r\n    // Keep your existing camera error handling\r\n    const handleCameraError = (error) => {\r\n        let errorMessage = '';\r\n        let errorAction = '';\r\n        let canRetry = false;\r\n\r\n        switch (error.name) {\r\n            case 'NotAllowedError':\r\n                errorMessage = 'Camera permission denied';\r\n                errorAction = 'Please allow camera access and click \"Try Again\"';\r\n                canRetry = true;\r\n                break;\r\n            case 'NotFoundError':\r\n                errorMessage = 'No camera found';\r\n                errorAction = 'Please connect a camera or use a device with a camera';\r\n                canRetry = true;\r\n                break;\r\n            case 'NotReadableError':\r\n                errorMessage = 'Camera is busy';\r\n                errorAction = 'Please close other apps using the camera and try again';\r\n                canRetry = true;\r\n                break;\r\n            case 'OverconstrainedError':\r\n                errorMessage = 'Camera settings not supported';\r\n                errorAction = 'Trying with basic camera settings...';\r\n                canRetry = true;\r\n                break;\r\n            default:\r\n                errorMessage = error.message || 'Camera error';\r\n                errorAction = 'Please check your camera and try again';\r\n                canRetry = true;\r\n        }\r\n\r\n        setCameraError({ message: errorMessage, action: errorAction, canRetry });\r\n        \r\n        if (canRetry && cameraRetryCount < 2 && error.name !== 'NotAllowedError') {\r\n            const retryDelay = (cameraRetryCount + 1) * 2000;\r\n            console.log(`🔄 Auto-retrying camera setup in ${retryDelay/1000}s (attempt ${cameraRetryCount + 1}/2)`);\r\n            \r\n            setTimeout(() => {\r\n                setCameraRetryCount(prev => prev + 1);\r\n                setupCamera();\r\n            }, retryDelay);\r\n        }\r\n    };\r\n\r\n    // 🔥 IMPROVED: Much smarter scanning with detection stability\r\n    const startScanning = () => {\r\n        if (!visionServiceRef.current || cameraStatus !== 'ready') {\r\n            console.log('⚠️ MTG Scanner not ready');\r\n            if (cameraStatus === 'error') {\r\n                showProfessionalToast('❌ Camera not ready. Please fix camera issues first.', 'error');\r\n            }\r\n            return;\r\n        }\r\n        \r\n        console.log(`▶️ Starting MTG Scanner Pro with IMPROVED Cooldown - ${scanMode} mode...`);\r\n        setIsScanning(true);\r\n        setScanningPausedForSelection(false);\r\n        \r\n        // 🔥 Reset cooldowns when starting scanning\r\n        cooldownSystemRef.current.resetCooldowns();\r\n        setCooldownStatus(cooldownSystemRef.current.getCooldownStatus());\r\n        \r\n        if (scanMode === 'continuous') {\r\n            setContinuousCount(0);\r\n            console.log('🔄 Continuous mode: Reset counter to 0');\r\n        }\r\n        \r\n        // 🔥 IMPROVED: Less aggressive scanning interval with stability detection\r\n        scanIntervalRef.current = setInterval(async () => {\r\n            try {\r\n                // 🔥 Check cooldown system first\r\n                const currentCardName = currentCard?.cardName;\r\n                if (!cooldownSystemRef.current.shouldScan(currentCardName)) {\r\n                    // Update cooldown status for UI\r\n                    setCooldownStatus(cooldownSystemRef.current.getCooldownStatus());\r\n                    return; // Skip this frame due to cooldown\r\n                }\r\n\r\n                // Don't scan if edition selector is showing\r\n                if (scanningPausedForSelection || showEditionSelector) {\r\n                    console.log('⏸️ Scanning paused for edition selection');\r\n                    cooldownSystemRef.current.setEditionSelectorOpen(true);\r\n                    return;\r\n                } else {\r\n                    cooldownSystemRef.current.setEditionSelectorOpen(false);\r\n                }\r\n\r\n                console.log(\"🔄 Processing frame for MTG CARD IDENTIFICATION...\");\r\n                \r\n                // Call your actual vision service\r\n                const result = await visionServiceRef.current.processVideoFrame(videoRef.current);\r\n                \r\n                if (result && result.hasCard && result.confidence >= 85) { // Higher confidence threshold\r\n                    console.log('🎯 High-confidence MTG Card detected:', result.cardName, `(${result.confidence}%)`);\r\n                    \r\n                    // 🔥 Add to stability buffer before processing\r\n                    const isStable = cooldownSystemRef.current.addDetection(result.cardName, result.confidence);\r\n                    \r\n                    if (isStable) {\r\n                        console.log('✅ Card detection is STABLE, processing...');\r\n                        \r\n                        // 🔥 Record detection in cooldown system\r\n                        cooldownSystemRef.current.recordDetection(result.cardName);\r\n                        setCooldownStatus(cooldownSystemRef.current.getCooldownStatus());\r\n                        \r\n                        // Stop scanning in single mode when card detected\r\n                        if (scanMode === 'single') {\r\n                            stopScanning();\r\n                        }\r\n                        \r\n                        // Always check for multiple editions\r\n                        await handleCardDetection(result);\r\n                    } else {\r\n                        console.log('⏳ Card detection not stable yet, need more consistent readings...');\r\n                    }\r\n                    \r\n                } else if (result && !result.hasCard) {\r\n                    setScanResult({ hasCard: false, message: result.message || 'No MTG card detected' });\r\n                    setCurrentCard(null);\r\n                }\r\n                \r\n                // Update cooldown status\r\n                setCooldownStatus(cooldownSystemRef.current.getCooldownStatus());\r\n                \r\n            } catch (error) {\r\n                console.error('❌ Scanning error:', error);\r\n                setScanResult({ hasCard: false, message: 'Scanner error - please try again' });\r\n            }\r\n        }, scanMode === 'single' ? 1500 : 3000); // 🔥 SLOWER intervals (was 500/1000)\r\n    };\r\n\r\n    // Keep your existing card detection logic but with stability\r\n    const handleCardDetection = async (detectedCard) => {\r\n        try {\r\n            console.log('🎭 Checking for multiple editions of:', detectedCard.cardName);\r\n            \r\n            const cardName = detectedCard.cardName.trim();\r\n            const searchQuery = `!\"${cardName}\"`;\r\n            const encodedQuery = encodeURIComponent(searchQuery);\r\n            \r\n            console.log('🔍 Scryfall search query:', searchQuery);\r\n            \r\n            const editionsResponse = await fetch(\r\n                `https://api.scryfall.com/cards/search?q=${encodedQuery}&unique=prints&order=released&dir=desc`\r\n            );\r\n            \r\n            if (editionsResponse.ok) {\r\n                const editionsData = await editionsResponse.json();\r\n                const editions = editionsData.data || [];\r\n                \r\n                console.log(`📊 Scryfall returned ${editions.length} total results`);\r\n                \r\n                const exactMatches = editions.filter(card => {\r\n                    const cardNameNormalized = card.name.toLowerCase().trim();\r\n                    const searchNameNormalized = cardName.toLowerCase().trim();\r\n                    return cardNameNormalized === searchNameNormalized;\r\n                });\r\n                \r\n                console.log(`🎯 Found ${exactMatches.length} exact name matches for \"${cardName}\"`);\r\n                \r\n                exactMatches.forEach((card, index) => {\r\n                    console.log(`   ${index + 1}. ${card.set_name} (${card.set.toUpperCase()}) - ${card.released_at}`);\r\n                });\r\n                \r\n                if (exactMatches.length > 1) {\r\n                    // 🔥 Only show edition selector if NOT in cooldown\r\n                    if (cooldownSystemRef.current.shouldScan()) {\r\n                        console.log(`🎭 Multiple editions found - showing selector`);\r\n                        setScanningPausedForSelection(true);\r\n                        cooldownSystemRef.current.setEditionSelectorOpen(true);\r\n                        \r\n                        const sortedEditions = sortEditionsByPreference(cardName, exactMatches);\r\n                        \r\n                        setPendingCardData(detectedCard);\r\n                        setPendingScanMode(scanMode);\r\n                        setAvailableEditions(sortedEditions);\r\n                        setShowEditionSelector(true);\r\n                        \r\n                        setScanResult(null);\r\n                        setCurrentCard(null);\r\n                        return;\r\n                    } else {\r\n                        console.log(`🔄 Multiple editions found but in cooldown, using first edition`);\r\n                        const enhancedCard = enhanceCardWithScryfall(detectedCard, exactMatches[0]);\r\n                        displayCard(enhancedCard);\r\n                    }\r\n                    \r\n                } else if (exactMatches.length === 1) {\r\n                    console.log(`✅ Single edition found: ${exactMatches[0].set_name} (${exactMatches[0].set.toUpperCase()})`);\r\n                    const enhancedCard = enhanceCardWithScryfall(detectedCard, exactMatches[0]);\r\n                    displayCard(enhancedCard);\r\n                    \r\n                    if (scanMode === 'continuous' && autoSaveEnabled) {\r\n                        const saved = await saveCardToCollection(enhancedCard);\r\n                        if (saved) {\r\n                            console.log(`💾 AUTO-SAVED: ${enhancedCard.cardName} to collection`);\r\n                            handleContinuousCounterAndLimit();\r\n                        }\r\n                    }\r\n                    \r\n                } else {\r\n                    console.log('⚠️ No exact Scryfall matches found, using original detection');\r\n                    displayCard(detectedCard);\r\n                    \r\n                    if (scanMode === 'continuous' && autoSaveEnabled) {\r\n                        const saved = await saveCardToCollection(detectedCard);\r\n                        if (saved) {\r\n                            console.log(`💾 AUTO-SAVED: ${detectedCard.cardName} to collection (no Scryfall match)`);\r\n                            handleContinuousCounterAndLimit();\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                const errorText = await editionsResponse.text();\r\n                console.log('❌ Scryfall API error:', editionsResponse.status, errorText);\r\n                displayCard(detectedCard);\r\n            }\r\n        } catch (error) {\r\n            console.error('❌ Edition lookup error:', error);\r\n            displayCard(detectedCard);\r\n        }\r\n    };\r\n\r\n    // Keep all your existing helper functions...\r\n    const sortEditionsByPreference = (cardName, editions) => {\r\n        const cardKey = cardName.toLowerCase().trim();\r\n        const userPreference = editionPreferences[cardKey];\r\n        \r\n        if (userPreference) {\r\n            console.log(`🧠 AI Learning: User previously preferred ${userPreference} for ${cardName}`);\r\n            \r\n            return editions.sort((a, b) => {\r\n                if (a.set === userPreference) return -1;\r\n                if (b.set === userPreference) return 1;\r\n                return 0;\r\n            });\r\n        }\r\n        \r\n        return editions;\r\n    };\r\n\r\n    const handleEditionSelected = async (selectedEdition) => {\r\n        if (pendingCardData && selectedEdition) {\r\n            const enhancedCard = enhanceCardWithScryfall(pendingCardData, selectedEdition);\r\n            displayCard(enhancedCard);\r\n            \r\n            console.log(`✅ User selected: ${selectedEdition.set_name} (${selectedEdition.set.toUpperCase()})`);\r\n            \r\n            learnEditionPreference(pendingCardData.cardName, selectedEdition);\r\n            \r\n            if (pendingScanMode === 'continuous' && autoSaveEnabled) {\r\n                const saved = await saveCardToCollection(enhancedCard);\r\n                if (saved) {\r\n                    console.log(`💾 AUTO-SAVED: ${enhancedCard.cardName} to collection`);\r\n                    handleContinuousCounterAndLimit();\r\n                }\r\n                \r\n                if (continuousCount < 9) {\r\n                    console.log('🔄 Resuming continuous scanning after edition selection...');\r\n                    setTimeout(() => {\r\n                        setScanningPausedForSelection(false);\r\n                        cooldownSystemRef.current.setEditionSelectorOpen(false);\r\n                        if (!isScanning) {\r\n                            startScanning();\r\n                        }\r\n                    }, 2000); // 🔥 Longer delay before resuming\r\n                }\r\n            }\r\n        }\r\n        \r\n        // 🔥 Close edition selector and notify cooldown system\r\n        setShowEditionSelector(false);\r\n        setAvailableEditions([]);\r\n        setPendingCardData(null);\r\n        setPendingScanMode(null);\r\n        setScanningPausedForSelection(false);\r\n        cooldownSystemRef.current.setEditionSelectorOpen(false);\r\n        setCooldownStatus(cooldownSystemRef.current.getCooldownStatus());\r\n    };\r\n\r\n    const handleEditionCancelled = async () => {\r\n        if (pendingCardData) {\r\n            displayCard(pendingCardData);\r\n            \r\n            if (pendingScanMode === 'continuous' && autoSaveEnabled) {\r\n                const saved = await saveCardToCollection(pendingCardData);\r\n                if (saved) {\r\n                    console.log(`💾 AUTO-SAVED: ${pendingCardData.cardName} to collection (cancelled edition selection)`);\r\n                    handleContinuousCounterAndLimit();\r\n                }\r\n                \r\n                if (continuousCount < 9) {\r\n                    console.log('🔄 Resuming continuous scanning after cancellation...');\r\n                    setTimeout(() => {\r\n                        setScanningPausedForSelection(false);\r\n                        cooldownSystemRef.current.setEditionSelectorOpen(false);\r\n                        if (!isScanning) {\r\n                            startScanning();\r\n                        }\r\n                    }, 2000); // 🔥 Longer delay\r\n                }\r\n            }\r\n        }\r\n        \r\n        // 🔥 Close edition selector and notify cooldown system\r\n        setShowEditionSelector(false);\r\n        setAvailableEditions([]);\r\n        setPendingCardData(null);\r\n        setPendingScanMode(null);\r\n        setScanningPausedForSelection(false);\r\n        cooldownSystemRef.current.setEditionSelectorOpen(false);\r\n        setCooldownStatus(cooldownSystemRef.current.getCooldownStatus());\r\n    };\r\n\r\n    // Keep all your other existing functions...\r\n    const learnEditionPreference = (cardName, selectedEdition) => {\r\n        const cardKey = cardName.toLowerCase().trim();\r\n        const newPreferences = {\r\n            ...editionPreferences,\r\n            [cardKey]: selectedEdition.set\r\n        };\r\n        \r\n        setEditionPreferences(newPreferences);\r\n        localStorage.setItem('mtg_edition_preferences', JSON.stringify(newPreferences));\r\n        \r\n        console.log(`🧠 AI Learning: Remembered ${selectedEdition.set_name} preference for ${cardName}`);\r\n    };\r\n\r\n    const handleContinuousCounterAndLimit = () => {\r\n        const newCount = continuousCount + 1;\r\n        setContinuousCount(newCount);\r\n        \r\n        if (newCount >= 10) {\r\n            console.log('🛑 CONTINUOUS MODE: 10-card limit reached, pausing...');\r\n            stopScanning();\r\n            setShowContinueDialog(true);\r\n        }\r\n    };\r\n\r\n    const handleContinueScanning = () => {\r\n        console.log('🔄 User chose to continue scanning...');\r\n        setShowContinueDialog(false);\r\n        setContinuousCount(0);\r\n        // 🔥 Reset cooldowns when continuing\r\n        cooldownSystemRef.current.resetCooldowns();\r\n        startScanning();\r\n    };\r\n\r\n    const handleStopScanning = () => {\r\n        console.log('⏹️ User chose to stop scanning at 10-card limit');\r\n        setShowContinueDialog(false);\r\n        setContinuousCount(0);\r\n    };\r\n\r\n    const enhanceCardWithScryfall = (originalCard, scryfallCard) => {\r\n        return {\r\n            ...originalCard,\r\n            cardType: scryfallCard.type_line,\r\n            manaCost: scryfallCard.mana_cost,\r\n            setInfo: scryfallCard.set_name,\r\n            rarity: scryfallCard.rarity,\r\n            scryfallId: scryfallCard.id,\r\n            scryfallImageUrl: scryfallCard.image_uris?.normal || scryfallCard.image_uris?.large,\r\n            scryfallUri: scryfallCard.scryfall_uri,\r\n            prices: scryfallCard.prices,\r\n            collectorNumber: scryfallCard.collector_number,\r\n            releaseDate: scryfallCard.released_at,\r\n            scryfallVerified: true,\r\n            setCode: scryfallCard.set\r\n        };\r\n    };\r\n\r\n    const displayCard = (card) => {\r\n        setCurrentCard(card);\r\n        setScanResult(card);\r\n        \r\n        setScanHistory(prev => {\r\n            const isDuplicate = prev.some(historyCard => \r\n                historyCard.cardName === card.cardName && \r\n                Math.abs(new Date(historyCard.timestamp) - new Date(card.timestamp)) < 5000\r\n            );\r\n            \r\n            if (!isDuplicate) {\r\n                return [card, ...prev.slice(0, 19)];\r\n            }\r\n            return prev;\r\n        });\r\n    };\r\n\r\n    // Stop scanning but keep camera active\r\n    const stopScanning = () => {\r\n        console.log('⏹️ Stopping MTG Scanner (camera stays active for persistence)...');\r\n        setIsScanning(false);\r\n        setScanningPausedForSelection(false);\r\n        \r\n        if (scanIntervalRef.current) {\r\n            clearInterval(scanIntervalRef.current);\r\n            scanIntervalRef.current = null;\r\n        }\r\n        \r\n        console.log('📷 Camera stream preserved for tab persistence');\r\n    };\r\n\r\n    // Only cleanup camera on component unmount\r\n    const cleanup = () => {\r\n        console.log('🧹 Cleaning up MTG Scanner...');\r\n        stopScanning();\r\n        \r\n        if (cameraStreamRef.current) {\r\n            console.log('📷 Stopping persistent camera stream...');\r\n            cameraStreamRef.current.getTracks().forEach(track => track.stop());\r\n            cameraStreamRef.current = null;\r\n            setCameraInitializationComplete(false);\r\n        }\r\n        \r\n        if (videoRef.current && videoRef.current.srcObject) {\r\n            const tracks = videoRef.current.srcObject.getTracks();\r\n            tracks.forEach(track => track.stop());\r\n            videoRef.current.srcObject = null;\r\n        }\r\n        \r\n        initializationPromiseRef.current = null;\r\n    };\r\n\r\n    // Collection management\r\n    const saveCardToCollection = async (card) => {\r\n        try {\r\n            if (!isPremiumUser && savedCards.length >= FREE_COLLECTION_LIMIT) {\r\n                console.log('🚨 Free collection limit reached');\r\n                setShowPaywallModal(true);\r\n                return false;\r\n            }\r\n            \r\n            const cardWithId = {\r\n                ...card,\r\n                id: Date.now() + Math.random(),\r\n                addedAt: new Date().toISOString(),\r\n                scannedAt: new Date().toLocaleString()\r\n            };\r\n            \r\n            const updatedCards = [cardWithId, ...savedCards];\r\n            setSavedCards(updatedCards);\r\n            \r\n            localStorage.setItem('mtg_saved_cards', JSON.stringify(updatedCards));\r\n            \r\n            console.log('💾 Card saved to collection:', card.cardName);\r\n            \r\n            if (scanMode === 'single') {\r\n                setScanResult(prev => ({\r\n                    ...prev,\r\n                    savedToCollection: true,\r\n                    message: `✅ ${card.cardName} saved to collection!`\r\n                }));\r\n                \r\n                setTimeout(() => {\r\n                    setScanResult(prev => ({\r\n                        ...prev,\r\n                        savedToCollection: false,\r\n                        message: undefined\r\n                    }));\r\n                }, 3000);\r\n            }\r\n            \r\n            return true;\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Failed to save card:', error);\r\n            setScanResult(prev => ({\r\n                ...prev,\r\n                message: `❌ Failed to save ${card.cardName}`\r\n            }));\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleUpgradeToPremium = () => {\r\n        console.log('💎 Initiating PayPal payment for premium upgrade...');\r\n        \r\n        const paypalLink = `https://www.paypal.com/paypalme/thediceyguy/9.99?country.x=US&locale.x=en_US`;\r\n        window.open(paypalLink, '_blank');\r\n        \r\n        setTimeout(() => {\r\n            setIsPremiumUser(true);\r\n            localStorage.setItem('mtg_premium_status', 'true');\r\n            setShowPaywallModal(false);\r\n            showProfessionalToast('💎 Premium upgrade successful! Unlimited collection storage activated.', 'success');\r\n        }, 5000);\r\n    };\r\n\r\n    const removeCardFromCollection = (cardId) => {\r\n        try {\r\n            const updatedCards = savedCards.filter(card => card.id !== cardId);\r\n            setSavedCards(updatedCards);\r\n            localStorage.setItem('mtg_saved_cards', JSON.stringify(updatedCards));\r\n            console.log('🗑️ Card removed from collection');\r\n        } catch (error) {\r\n            console.error('❌ Failed to remove card:', error);\r\n        }\r\n    };\r\n\r\n    const openCardInScryfall = (card) => {\r\n        if (card && card.cardName) {\r\n            const searchUrl = `https://scryfall.com/search?q=${encodeURIComponent(card.cardName)}`;\r\n            window.open(searchUrl, '_blank');\r\n            console.log('🔗 Opening Scryfall for:', card.cardName);\r\n        }\r\n    };\r\n\r\n    const toggleUIVisibility = () => {\r\n        setIsUIVisible(!isUIVisible);\r\n        console.log('👁️ UI visibility toggled:', !isUIVisible);\r\n    };\r\n\r\n    const handleCameraSwitch = async (newCameraId) => {\r\n        console.log('🔄 Switching to camera:', newCameraId);\r\n        \r\n        // Stop current stream\r\n        if (cameraStreamRef.current) {\r\n            cameraStreamRef.current.getTracks().forEach(track => track.stop());\r\n            cameraStreamRef.current = null;\r\n        }\r\n        \r\n        // Set new camera\r\n        setSelectedCameraId(newCameraId);\r\n        setCameraInitializationComplete(false);\r\n        \r\n        // Restart with new camera\r\n        await setupCamera(newCameraId);\r\n        \r\n        setShowCameraSelector(false);\r\n        showProfessionalToast('📷 Camera switched successfully!', 'success');\r\n    };\r\n\r\n    const refreshCameraList = async () => {\r\n        console.log('🔄 Refreshing camera list...');\r\n        await enumerateCameras();\r\n        showProfessionalToast('📷 Camera list refreshed!', 'success');\r\n    };\r\n\r\n    const retryCameraSetup = () => {\r\n        console.log('🔄 Manual camera retry requested');\r\n        setCameraRetryCount(0);\r\n        setCameraError(null);\r\n        setCameraInitializationComplete(false);\r\n        initializationPromiseRef.current = null;\r\n        setupCamera();\r\n    };\r\n\r\n    // Tab switching handler that preserves camera\r\n    const handleTabSwitch = (newTab) => {\r\n        console.log(`🔄 Switching from ${activeTab} to ${newTab} (camera preserved)`);\r\n        setActiveTab(newTab);\r\n        \r\n        if (newTab === 'scanner' && cameraStreamRef.current && videoRef.current) {\r\n            setTimeout(() => {\r\n                if (!videoRef.current.srcObject) {\r\n                    console.log('📷 Reconnecting video element to persistent camera stream...');\r\n                    videoRef.current.srcObject = cameraStreamRef.current;\r\n                    videoRef.current.play();\r\n                }\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    // 🔥 PROFESSIONAL: Updated cooldown status renderer\r\n    const renderCooldownStatus = () => {\r\n        return (\r\n            <ProfessionalCooldownStatus\r\n                cooldownStatus={cooldownStatus}\r\n                isVisible={activeTab === 'scanner'}\r\n            />\r\n        );\r\n    };\r\n\r\n    // Return the professional JSX structure\r\n    return (\r\n        <div className=\"mtg-scanner-pro\">\r\n            {/* 🏆 PROFESSIONAL HEADER */}\r\n            <div className=\"app-header\">\r\n                <div className=\"app-title-section\">\r\n                    <div className=\"app-logo\">\r\n                        MTG<br/>SCAN\r\n                    </div>\r\n                    <div className=\"app-title\">\r\n                        <h1>MTG Scanner Pro</h1>\r\n                        <span className=\"app-subtitle\">\r\n                            🔥 Enhanced Smart Cooldown System • Professional Grade\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                \r\n                <ProfessionalStats\r\n                    accuracy={98}\r\n                    scannedCount={scanHistory.length}\r\n                    savedCount={savedCards.length}\r\n                    aiLearned={Object.keys(editionPreferences).length}\r\n                    isPremium={isPremiumUser}\r\n                    cooldownActive={!cooldownStatus.canScan}\r\n                />\r\n            </div>\r\n\r\n            {/* 🎨 PROFESSIONAL TAB NAVIGATION */}\r\n            <ProfessionalTabs\r\n                activeTab={activeTab}\r\n                onTabChange={handleTabSwitch}\r\n                savedCards={savedCards}\r\n                isPremium={isPremiumUser}\r\n            />\r\n\r\n            {/* MAIN CONTENT AREA */}\r\n            <div className=\"main-content\">\r\n                \r\n                {/* 🔍 SCANNER TAB */}\r\n                {activeTab === 'scanner' && (\r\n                    <>\r\n                        <div className=\"scanner-section glass-card\">\r\n                            {/* Video Container with Professional Overlays */}\r\n                            <div className=\"video-container\">\r\n                                <video\r\n                                    ref={videoRef}\r\n                                    className=\"scanner-video\"\r\n                                    autoPlay\r\n                                    playsInline\r\n                                    muted\r\n                                />\r\n                                \r\n                                {/* 🔥 PROFESSIONAL Cooldown Status */}\r\n                                {renderCooldownStatus()}\r\n                                \r\n                                {/* 📷 PROFESSIONAL Camera Status */}\r\n                                <ProfessionalCameraStatus\r\n                                    cameraStatus={cameraStatus}\r\n                                    cameraInitialized={cameraInitializationComplete}\r\n                                />\r\n                                \r\n                                {/* Camera Error Overlay */}\r\n                                {cameraError && (\r\n                                    <div className=\"camera-error-overlay\">\r\n                                        <div className=\"camera-error-card\">\r\n                                            <h3>📹 Camera Issue</h3>\r\n                                            <p><strong>{cameraError.message}</strong></p>\r\n                                            <p>{cameraError.action}</p>\r\n                                            {cameraError.canRetry && (\r\n                                                <button \r\n                                                    onClick={retryCameraSetup}\r\n                                                    className=\"retry-camera-btn\"\r\n                                                >\r\n                                                    🔄 Try Again\r\n                                                </button>\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                                \r\n                                {/* Scanning Overlay */}\r\n                                {isScanning && (\r\n                                    <div className=\"scanning-overlay\">\r\n                                        <div className={`scan-frame ${scanningPausedForSelection ? 'paused' : ''}`}></div>\r\n                                        <div className=\"scan-instructions\">\r\n                                            {scanningPausedForSelection ? \r\n                                                '⏸️ Scanner paused for edition selection' :\r\n                                                '🔍 Position MTG card in frame'\r\n                                            }\r\n                                            <div className=\"scan-tech\">\r\n                                                🔥 Enhanced smart cooldown active\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n\r\n                            {/* 🎮 PROFESSIONAL Scan Controls */}\r\n                            <ProfessionalScanControls\r\n                                scanMode={scanMode}\r\n                                setScanMode={setScanMode}\r\n                                isScanning={isScanning}\r\n                                onStartScanning={startScanning}\r\n                                onStopScanning={stopScanning}\r\n                                cameraStatus={cameraStatus}\r\n                                showEditionSelector={showEditionSelector}\r\n                                scanningPausedForSelection={scanningPausedForSelection}\r\n                                cooldownStatus={cooldownStatus}\r\n                            />\r\n                        </div>\r\n\r\n                        {/* 💎 PROFESSIONAL Card Display */}\r\n                        {isUIVisible && (\r\n                            <div className=\"card-info-section glass-card\">\r\n                                <ProfessionalCardResult\r\n                                    scanResult={scanResult}\r\n                                    currentCard={currentCard}\r\n                                    onSaveCard={saveCardToCollection}\r\n                                    onOpenScryfall={openCardInScryfall}\r\n                                />\r\n\r\n                                {/* Show scan history */}\r\n                                {scanHistory.length > 0 && (\r\n                                    <div style={{marginTop: '24px'}}>\r\n                                        <h4 style={{color: '#4a90e2', marginBottom: '16px', fontSize: '16px'}}>\r\n                                            📊 Recent Scans\r\n                                        </h4>\r\n                                        <div style={{maxHeight: '200px', overflowY: 'auto'}} className=\"scrollable\">\r\n                                            {scanHistory.map((card, index) => (\r\n                                                <div key={index} style={{\r\n                                                    padding: '12px',\r\n                                                    margin: '8px 0',\r\n                                                    background: 'rgba(74, 144, 226, 0.1)',\r\n                                                    borderRadius: '8px',\r\n                                                    fontSize: '13px',\r\n                                                    display: 'flex',\r\n                                                    justifyContent: 'space-between',\r\n                                                    alignItems: 'center',\r\n                                                    border: '1px solid rgba(74, 144, 226, 0.2)'\r\n                                                }}>\r\n                                                    <span style={{fontWeight: '600'}}>{card.cardName}</span>\r\n                                                    <span style={{color: '#64b5f6', fontWeight: '700'}}>{card.confidence}%</span>\r\n                                                </div>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                )}\r\n\r\n                {/* 🃏 COLLECTION TAB */}\r\n                {activeTab === 'deck' && (\r\n                    <div className=\"glass-card\" style={{padding: '32px', width: '100%'}}>\r\n                        <DeckManager \r\n                            savedCards={savedCards}\r\n                            onRemoveCard={removeCardFromCollection}\r\n                            onOpenScryfall={openCardInScryfall}\r\n                            scanHistory={scanHistory}\r\n                            isPremiumUser={isPremiumUser}\r\n                            collectionLimit={FREE_COLLECTION_LIMIT}\r\n                            onUpgrade={handleUpgradeToPremium}\r\n                        />\r\n                    </div>\r\n                )}\r\n\r\n                {/* 📚 KNOWLEDGE TAB */}\r\n                {activeTab === 'knowledge' && (\r\n                    <div className=\"glass-card\" style={{padding: '32px', width: '100%'}}>\r\n                        <MTGKnowledgeBase \r\n                            currentCard={currentCard}\r\n                            savedCards={savedCards}\r\n                            editionPreferences={editionPreferences}\r\n                        />\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* 📊 PROFESSIONAL Status Bar */}\r\n            <div className=\"status-bar glass-card\">\r\n                <div className=\"status-left\">\r\n                    {scanHistory.length > 0 && (\r\n                        <>\r\n                            <span className=\"status-item\">📊 Scanned: {scanHistory.length}</span>\r\n                            {currentCard && (\r\n                                <span className=\"status-item\">\r\n                                    🎯 Last: {currentCard.cardName} ({currentCard.confidence}%)\r\n                                </span>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </div>\r\n                <div className=\"status-right\">\r\n                    <div className=\"footer-logo\">\r\n                        MTG Scanner Pro\r\n                    </div>\r\n                    <span className=\"status-item\">\r\n                        🔥 Enhanced Cooldown: {cooldownStatus.canScan ? 'Ready' : 'Active'}\r\n                    </span>\r\n                    <span className=\"status-item\">\r\n                        📷 Camera: {cameraStatus === 'ready' ? 'Ready ✅' : 'Initializing ⏳'}\r\n                    </span>\r\n                    <span className=\"status-item\">🧠 AI: Gemini Vision</span>\r\n                    <span className=\"status-item\">{isPremiumUser ? '💎 Premium' : '🆓 Free'}</span>\r\n                </div>\r\n            </div>\r\n\r\n            {/* 🎭 PROFESSIONAL Edition Selector */}\r\n            {showEditionSelector && (\r\n                <ProfessionalEditionSelector\r\n                    cardName={pendingCardData?.cardName}\r\n                    availableEditions={availableEditions}\r\n                    onEditionSelected={handleEditionSelected}\r\n                    onCancel={handleEditionCancelled}\r\n                    aiRecommendation={editionPreferences[pendingCardData?.cardName?.toLowerCase()?.trim()]}\r\n                />\r\n            )}\r\n\r\n            {/* Premium Upgrade Paywall Modal */}\r\n            {showPaywallModal && (\r\n                <div className=\"modal-overlay\">\r\n                    <div className=\"modal\">\r\n                        <h3>💎 Upgrade to Premium</h3>\r\n                        \r\n                        <div style={{ margin: '20px 0', fontSize: '18px' }}>\r\n                            <p style={{ margin: '8px 0', lineHeight: '1.5' }}>\r\n                                You've reached the <strong>{FREE_COLLECTION_LIMIT} card limit</strong> for free users!\r\n                            </p>\r\n                        </div>\r\n                        \r\n                        <div style={{\r\n                            background: 'rgba(74, 144, 226, 0.1)',\r\n                            padding: '20px',\r\n                            borderRadius: '10px',\r\n                            margin: '20px 0'\r\n                        }}>\r\n                            <h4 style={{ margin: '0 0 15px 0', color: '#4a90e2' }}>Premium Features:</h4>\r\n                            <ul style={{ textAlign: 'left', lineHeight: '1.8', margin: 0, paddingLeft: '20px' }}>\r\n                                <li>🔥 <strong>Unlimited collection storage</strong></li>\r\n                                <li>🧠 <strong>Advanced AI learning</strong></li>\r\n                                <li>📊 <strong>Collection analytics</strong></li>\r\n                                <li>💰 <strong>Price tracking & alerts</strong></li>\r\n                                <li>🎯 <strong>Deck optimization tools</strong></li>\r\n                                <li>⚡ <strong>Priority customer support</strong></li>\r\n                            </ul>\r\n                        </div>\r\n                        \r\n                        <div className=\"modal-buttons\">\r\n                            <button \r\n                                onClick={handleUpgradeToPremium}\r\n                                className=\"modal-btn primary\"\r\n                            >\r\n                                💎 Upgrade for $9.99/month\r\n                            </button>\r\n                            <button \r\n                                onClick={() => setShowPaywallModal(false)}\r\n                                className=\"modal-btn secondary\"\r\n                            >\r\n                                Maybe Later\r\n                            </button>\r\n                        </div>\r\n                        \r\n                        <div style={{\r\n                            marginTop: '20px',\r\n                            paddingTop: '20px',\r\n                            borderTop: '1px solid #444',\r\n                            fontSize: '12px',\r\n                            color: '#ccc'\r\n                        }}>\r\n                            <p>💳 Secure payment via PayPal</p>\r\n                            <p>📧 Payment to: thediceyguy@gmail.com</p>\r\n                            <p>🔒 Cancel anytime, no long-term commitment</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Continue Scanning Dialog */}\r\n            {showContinueDialog && (\r\n                <div className=\"modal-overlay\">\r\n                    <div className=\"modal\">\r\n                        <h3>🔥 10 Cards Scanned with Smart Cooldown!</h3>\r\n                        <p style={{ margin: '8px 0', lineHeight: '1.5' }}>\r\n                            You've successfully scanned <strong>10 cards</strong> with the enhanced cooldown system.\r\n                        </p>\r\n                        <p style={{ margin: '8px 0', lineHeight: '1.5' }}>\r\n                            AI learned <strong>{Object.keys(editionPreferences).length}</strong> edition preferences.\r\n                        </p>\r\n                        <p style={{ margin: '8px 0', lineHeight: '1.5' }}>\r\n                            Total saved to collection: <strong>{savedCards.length}</strong> cards\r\n                        </p>\r\n                        \r\n                        <div className=\"modal-buttons\">\r\n                            <button \r\n                                onClick={handleContinueScanning}\r\n                                className=\"modal-btn primary\"\r\n                            >\r\n                                🔥 Continue Smart Scanning\r\n                            </button>\r\n                            <button \r\n                                onClick={handleStopScanning}\r\n                                className=\"modal-btn secondary\"\r\n                            >\r\n                                ⏹️ Stop & Review Collection\r\n                            </button>\r\n                        </div>\r\n                        \r\n                        <div style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'space-around',\r\n                            marginTop: '16px',\r\n                            paddingTop: '16px',\r\n                            borderTop: '1px solid #444',\r\n                            fontSize: '12px',\r\n                            color: '#ccc'\r\n                        }}>\r\n                            <span>🔥 Smart scans: {continuousCount}</span>\r\n                            <span>🧠 AI learned: {Object.keys(editionPreferences).length}</span>\r\n                            <span>📁 Collection: {savedCards.length} total</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Camera Selector Modal */}\r\n            {showCameraSelector && (\r\n                <div className=\"modal-overlay\">\r\n                    <div className=\"modal\">\r\n                        <h3>📷 Camera Settings</h3>\r\n                        \r\n                        <div style={{ marginBottom: '20px', textAlign: 'left' }}>\r\n                            <p style={{ margin: '0 0 15px 0', fontSize: '14px', color: '#ccc' }}>\r\n                                Select your preferred camera for MTG card scanning:\r\n                            </p>\r\n                            \r\n                            {availableCameras.length === 0 ? (\r\n                                <div style={{\r\n                                    padding: '20px',\r\n                                    background: 'rgba(220, 53, 69, 0.1)',\r\n                                    border: '1px solid #dc3545',\r\n                                    borderRadius: '8px',\r\n                                    textAlign: 'center'\r\n                                }}>\r\n                                    <p style={{ margin: '0 0 10px 0', color: '#dc3545' }}>\r\n                                        ❌ No cameras detected\r\n                                    </p>\r\n                                    <button\r\n                                        onClick={refreshCameraList}\r\n                                        className=\"modal-btn primary\"\r\n                                    >\r\n                                        🔄 Refresh Camera List\r\n                                    </button>\r\n                                </div>\r\n                            ) : (\r\n                                <div style={{ maxHeight: '300px', overflowY: 'auto' }}>\r\n                                    {availableCameras.map((camera, index) => (\r\n                                        <div\r\n                                            key={camera.deviceId}\r\n                                            onClick={() => handleCameraSwitch(camera.deviceId)}\r\n                                            style={{\r\n                                                padding: '12px',\r\n                                                margin: '8px 0',\r\n                                                background: selectedCameraId === camera.deviceId ? \r\n                                                    'rgba(74, 144, 226, 0.3)' : 'rgba(255,255,255,0.1)',\r\n                                                border: selectedCameraId === camera.deviceId ? \r\n                                                    '2px solid #4a90e2' : '1px solid #666',\r\n                                                borderRadius: '6px',\r\n                                                cursor: 'pointer',\r\n                                                transition: 'all 0.2s'\r\n                                            }}\r\n                                        >\r\n                                            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                                                <div>\r\n                                                    <div style={{ fontWeight: '600', marginBottom: '4px' }}>\r\n                                                        📷 {camera.label || `Camera ${index + 1}`}\r\n                                                    </div>\r\n                                                    <div style={{ fontSize: '12px', color: '#ccc' }}>\r\n                                                        {camera.deviceId.substring(0, 20)}...\r\n                                                    </div>\r\n                                                </div>\r\n                                                {selectedCameraId === camera.deviceId && (\r\n                                                    <div style={{ color: '#4a90e2', fontWeight: 'bold' }}>\r\n                                                        ✅ Active\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        \r\n                        <div className=\"modal-buttons\">\r\n                            <button\r\n                                onClick={refreshCameraList}\r\n                                className=\"modal-btn secondary\"\r\n                            >\r\n                                🔄 Refresh\r\n                            </button>\r\n                            <button\r\n                                onClick={() => setShowCameraSelector(false)}\r\n                                className=\"modal-btn primary\"\r\n                            >\r\n                                ✅ Close\r\n                            </button>\r\n                        </div>\r\n                        \r\n                        <div style={{\r\n                            marginTop: '15px',\r\n                            fontSize: '12px',\r\n                            color: '#999',\r\n                            textAlign: 'center'\r\n                        }}>\r\n                            💡 Tip: Higher resolution cameras (1080p+) work best for card recognition\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scanner;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}