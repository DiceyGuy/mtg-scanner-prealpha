{"ast":null,"code":"import _objectSpread from\"C:/Users/kim-a/Documents/DiceyTeck/MTG Scanner BACKUP/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// MTG-Focused GeminiVisionService.js - IMPROVED RATE LIMITING\nclass GeminiVisionService{constructor(){console.log('🧠 MTG CARD SCANNER - GEMINI + SCRYFALL INTEGRATION!');this.canvas=null;this.ctx=null;this.debugMode=true;// 🔥 IMPROVED GOOGLE GEMINI API CONFIGURATION\nthis.geminiApiKey='AIzaSyBtqyUy1X3BdNtUAW88QZWbtqI39MbUDdk';this.geminiApiUrl='https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';this.lastGeminiCall=0;this.geminiRateLimit=4000;// 🔥 INCREASED from 1000ms to 4000ms (4 seconds)\nthis.consecutiveErrors=0;this.backoffMultiplier=1.5;// 🔥 NEW: Frame similarity detection to avoid duplicate API calls\nthis.lastFrameHash=null;this.frameSimilarityThreshold=0.95;this.lastSuccessfulDetection=null;this.lastSuccessfulTime=0;// SCRYFALL INTEGRATION\nthis.scryfallData=new Map();this.scryfallLoaded=false;this.loadingScryfallData=false;console.log('✅ Gemini Vision API initialized successfully');console.log('🔧 MTG-focused scanner with Scryfall database integration');console.log('📦 Loading Scryfall MTG database...');// Start loading Scryfall data\nthis.initializeScryfallData();this.log('🚀 MTG Scanner initialized - preparing Scryfall database');}async initializeScryfallData(){if(this.loadingScryfallData||this.scryfallLoaded)return;this.loadingScryfallData=true;console.log('📦 Loading Scryfall MTG card database...');try{// Get bulk data info from Scryfall\nconst bulkResponse=await fetch('https://api.scryfall.com/bulk-data');const bulkInfo=await bulkResponse.json();// Find the Oracle Cards bulk data (best for card identification)\nconst oracleCards=bulkInfo.data.find(item=>item.type==='oracle_cards');if(!oracleCards){throw new Error('Oracle cards bulk data not found');}console.log('⬇️ Downloading Scryfall Oracle Cards database...');console.log('📊 Database info:',{size:Math.round(oracleCards.size/1024/1024)+' MB',updated:oracleCards.updated_at});// Download the actual card data\nconst cardsResponse=await fetch(oracleCards.download_uri);const cardsData=await cardsResponse.json();// Process and index the cards for fast lookup\nlet processedCards=0;for(const card of cardsData){if(card.lang==='en'){var _card$image_uris;// Only English cards\nconst cardKey=card.name.toLowerCase();this.scryfallData.set(cardKey,{name:card.name,oracle_id:card.oracle_id,set:card.set_name,set_code:card.set,type_line:card.type_line,mana_cost:card.mana_cost||'',cmc:card.cmc||0,colors:card.colors||[],rarity:card.rarity,image_uri:((_card$image_uris=card.image_uris)===null||_card$image_uris===void 0?void 0:_card$image_uris.normal)||'',scryfall_uri:card.scryfall_uri});processedCards++;}}this.scryfallLoaded=true;console.log('✅ Scryfall database loaded successfully!');console.log('📊 Total MTG cards in database:',processedCards);console.log('🎯 MTG Scanner ready for professional card identification!');}catch(error){console.error('❌ Failed to load Scryfall database:',error);console.log('⚠️ Falling back to basic MTG card detection');this.scryfallLoaded=false;}finally{this.loadingScryfallData=false;}}log(message){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(this.debugMode){console.log(\"\\uD83E\\uDDE0 \".concat(message),data||'');}}// 🔥 NEW: Calculate simple frame hash for similarity detection\ncalculateFrameHash(imageData){let hash=0;const step=Math.floor(imageData.length/100);// Sample 100 points\nfor(let i=0;i<imageData.length;i+=step){hash=(hash<<5)-hash+imageData[i]&0xffffffff;}return hash;}// 🔥 NEW: Check if current frame is too similar to last frame\nisFrameSimilarToLast(frameData){const canvas=frameData.canvas;const ctx=canvas.getContext('2d');const imageData=ctx.getImageData(0,0,canvas.width,canvas.height);const currentHash=this.calculateFrameHash(imageData.data);if(this.lastFrameHash===null){this.lastFrameHash=currentHash;return false;}// Simple similarity check - if hash is identical or very close, skip\nconst hashDifference=Math.abs(currentHash-this.lastFrameHash);const isSimilar=hashDifference<1000;// Threshold for \"too similar\"\nthis.lastFrameHash=currentHash;if(isSimilar){console.log('⏭️ Frame too similar to last, skipping API call');}return isSimilar;}// MAIN PROCESSING METHOD - MTG FOCUSED\nasync processVideoFrame(videoElement){this.log('🔄 Processing frame for MTG CARD IDENTIFICATION...');const startTime=performance.now();try{// Step 1: Capture frame\nconst frameData=await this.captureHighQualityFrame(videoElement);this.log('📷 Frame captured',\"\".concat(frameData.width,\"x\").concat(frameData.height));// 🔥 NEW: Check frame similarity to avoid duplicate API calls\nif(this.isFrameSimilarToLast(frameData)){// Return last successful detection if we have one and it's recent\nif(this.lastSuccessfulDetection&&Date.now()-this.lastSuccessfulTime<5000){this.log('♻️ Returning cached detection for similar frame');return this.lastSuccessfulDetection;}// Otherwise return no detection\nreturn{hasCard:false,message:'Frame unchanged, skipping scan',confidence:0,method:'frame_similarity_skip',processingTime:Math.round(performance.now()-startTime),timestamp:new Date().toISOString()};}// Step 2: MTG-focused Gemini Vision analysis\nconst geminiResult=await this.callGeminiVisionForMTG(frameData);this.log('🎯 Gemini MTG analysis result',geminiResult);// Step 3: Enhance with Scryfall database\nconst enhancedResult=await this.enhanceWithScryfallData(geminiResult,frameData);this.log('✨ Scryfall-enhanced result',enhancedResult);const processingTime=Math.round(performance.now()-startTime);const finalResult=this.formatMTGScannerResult(enhancedResult,processingTime);// Cache successful detections\nif(finalResult.hasCard&&finalResult.confidence>=80){this.lastSuccessfulDetection=finalResult;this.lastSuccessfulTime=Date.now();this.consecutiveErrors=0;// Reset error count on success\n}return finalResult;}catch(error){this.log('❌ MTG scanning error, using fallback',error.message);this.consecutiveErrors++;const processingTime=Math.round(performance.now()-startTime);return await this.mtgFallback(videoElement,processingTime);}}// 🔥 IMPROVED: MTG-OPTIMIZED GEMINI VISION CALL with better rate limiting\nasync callGeminiVisionForMTG(frameData){this.log('🧠 Calling Gemini Vision for MTG CARD IDENTIFICATION...');// 🔥 IMPROVED: Dynamic rate limiting with backoff\nconst now=Date.now();let actualRateLimit=this.geminiRateLimit;// Apply exponential backoff if we've had consecutive errors\nif(this.consecutiveErrors>0){actualRateLimit=this.geminiRateLimit*Math.pow(this.backoffMultiplier,this.consecutiveErrors);actualRateLimit=Math.min(actualRateLimit,30000);// Max 30 seconds\nconsole.log(\"\\u23F3 Applying backoff: \".concat(actualRateLimit,\"ms (errors: \").concat(this.consecutiveErrors,\")\"));}if(now-this.lastGeminiCall<actualRateLimit){const waitTime=actualRateLimit-(now-this.lastGeminiCall);this.log(\"\\u23F3 Rate limiting: waiting \".concat(waitTime,\"ms\"));throw new Error(\"Rate limited - wait \".concat(waitTime,\"ms between calls\"));}this.lastGeminiCall=now;// Convert frame to base64\nconst imageBase64=this.frameToBase64(frameData);const base64Data=imageBase64.split(',')[1];this.log('📤 Image ready for MTG analysis, size:',base64Data.length);// 🔥 IMPROVED: More specific MTG prompt\nconst mtgPrompt=\"You are an expert Magic: The Gathering card identifier. Analyze this image ONLY for MTG cards.\\n\\nCRITICAL RULES:\\n1. If this is NOT a Magic: The Gathering card, respond with \\\"NOT_MTG_CARD\\\"\\n2. Only identify cards with 90%+ confidence\\n3. Focus on the card name in the title area\\n4. Ignore blurry, partial, or unclear cards\\n\\nIf you see a clear MTG card, identify:\\n- CARD NAME (exact spelling, most important)\\n- Mana cost from top-right corner\\n- Card type (Creature, Instant, etc.)\\n- Set symbol if clearly visible\\n\\nRESPOND EXACTLY LIKE THIS:\\nCARD_NAME: [exact card name]\\nMANA_COST: [symbols like {R}, {2}{U}, etc.]\\nTYPE: [card type line]\\nSET: [set name if visible, otherwise \\\"Unknown\\\"]\\nTEXT: [first line of rules text if clearly visible]\\nCONFIDENCE: [80-100 only for clear cards]\\n\\nONLY analyze clear, well-lit MTG cards. Reject anything unclear.\";const requestBody={contents:[{parts:[{text:mtgPrompt},{inline_data:{mime_type:\"image/jpeg\",data:base64Data}}]}],generationConfig:{temperature:0.1,// 🔥 Lower temperature for more consistent results\ntopK:1,topP:0.8,maxOutputTokens:200// 🔥 Limit output length\n}};try{const response=await fetch(\"\".concat(this.geminiApiUrl,\"?key=\").concat(this.geminiApiKey),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});this.log('📥 Response received:',{status:response.status,statusText:response.statusText,ok:response.ok});if(!response.ok){const errorText=await response.text();this.log('❌ Gemini error response:',errorText);// 🔥 Check for specific rate limit errors\nif(response.status===429){this.consecutiveErrors++;throw new Error(\"Gemini rate limited: \".concat(response.status,\" - Implementing longer backoff\"));}throw new Error(\"Gemini error: \".concat(response.status,\" - \").concat(errorText));}const data=await response.json();// Check if response has expected structure\nif(!data.candidates||!data.candidates[0]||!data.candidates[0].content){throw new Error('Invalid Gemini response structure');}// CRITICAL: LOG THE RAW RESPONSE TO DEBUG JSON PARSING\nconst responseText=data.candidates[0].content.parts[0].text;console.log('🎯 RAW GEMINI RESPONSE (for debugging):');console.log('---START RESPONSE---');console.log(responseText);console.log('---END RESPONSE---');// Parse MTG-specific response format\nconst mtgAnalysis=this.parseMTGResponse(responseText);this.log('✅ MTG parsing successful:',mtgAnalysis);return mtgAnalysis;}catch(error){this.log('❌ Gemini MTG Vision call failed:',error.message);throw error;}}// 🔥 IMPROVED: Parse MTG-specific response with better error handling\nparseMTGResponse(responseText){if(!responseText||responseText.includes('NOT_MTG_CARD')){return{hasCard:false,cardName:'',confidence:0,reason:'Not a Magic: The Gathering card'};}const lines=responseText.split('\\n');const result={hasCard:true,cardName:'',manaCost:'',cardType:'',setInfo:'',rulesText:'',confidence:50};for(const line of lines){const trimmedLine=line.trim();if(trimmedLine.startsWith('CARD_NAME:')){result.cardName=trimmedLine.replace('CARD_NAME:','').trim();}else if(trimmedLine.startsWith('MANA_COST:')){result.manaCost=trimmedLine.replace('MANA_COST:','').trim();}else if(trimmedLine.startsWith('TYPE:')){result.cardType=trimmedLine.replace('TYPE:','').trim();}else if(trimmedLine.startsWith('SET:')){result.setInfo=trimmedLine.replace('SET:','').trim();}else if(trimmedLine.startsWith('TEXT:')){result.rulesText=trimmedLine.replace('TEXT:','').trim();}else if(trimmedLine.startsWith('CONFIDENCE:')){const confStr=trimmedLine.replace('CONFIDENCE:','').trim();result.confidence=parseInt(confStr)||50;}}// 🔥 Validation: Must have card name and reasonable confidence\nif(!result.cardName||result.cardName.length<3){return{hasCard:false,cardName:'',confidence:0,reason:'No valid card name detected'};}// 🔥 Must have high confidence for MTG cards\nif(result.confidence<80){return{hasCard:false,cardName:result.cardName,confidence:result.confidence,reason:\"Confidence too low: \".concat(result.confidence,\"%\")};}return result;}// ENHANCE WITH SCRYFALL DATABASE\nasync enhanceWithScryfallData(geminiResult,frameData){this.log('✨ Enhancing with Scryfall MTG database...');if(!this.scryfallLoaded){this.log('⚠️ Scryfall database not loaded yet, using basic enhancement');return geminiResult;}let enhanced=_objectSpread({},geminiResult);if(geminiResult.hasCard&&geminiResult.cardName){const cardKey=geminiResult.cardName.toLowerCase().trim();// Direct Scryfall lookup\nif(this.scryfallData.has(cardKey)){const scryfallCard=this.scryfallData.get(cardKey);enhanced=_objectSpread(_objectSpread({},enhanced),{},{cardName:scryfallCard.name,// Use official name\nsetInfo:scryfallCard.set,cardType:scryfallCard.type_line,manaCost:scryfallCard.mana_cost,rarity:scryfallCard.rarity,colors:scryfallCard.colors,imageUri:scryfallCard.image_uri,scryfallUri:scryfallCard.scryfall_uri,confidence:Math.min(enhanced.confidence+10,98),// 🔥 Smaller boost\nverificationSource:'scryfall_exact_match',isVerified:true});this.log('✅ EXACT MATCH found in Scryfall database:',scryfallCard.name);}else{// Fuzzy matching in Scryfall database\nconst fuzzyMatch=this.scryfallFuzzyMatch(cardKey);if(fuzzyMatch.found){enhanced=_objectSpread(_objectSpread({},enhanced),{},{cardName:fuzzyMatch.card.name,setInfo:fuzzyMatch.card.set,cardType:fuzzyMatch.card.type_line,manaCost:fuzzyMatch.card.mana_cost,confidence:Math.min(enhanced.confidence+5,95),// 🔥 Smaller boost for fuzzy\nverificationSource:'scryfall_fuzzy_match',isFuzzyMatch:true,matchScore:fuzzyMatch.score,originalDetection:geminiResult.cardName});this.log('⚠️ FUZZY MATCH found in Scryfall:',fuzzyMatch.card.name);}}}return enhanced;}// SCRYFALL FUZZY MATCHING\nscryfallFuzzyMatch(cardName){let bestMatch=null;let bestScore=0;const minScore=0.8;// 🔥 Higher threshold for fuzzy matching\n// Search through Scryfall database\nfor(const[key,card]of this.scryfallData){const score=this.calculateSimilarity(cardName,key);if(score>bestScore&&score>=minScore){bestScore=score;bestMatch=card;}}return bestMatch?{found:true,card:bestMatch,score:bestScore}:{found:false,card:null,score:0};}// STRING SIMILARITY CALCULATION\ncalculateSimilarity(str1,str2){const longer=str1.length>str2.length?str1:str2;const shorter=str1.length>str2.length?str2:str1;if(longer.length===0)return 1.0;const distance=this.levenshteinDistance(longer,shorter);return(longer.length-distance)/longer.length;}levenshteinDistance(str1,str2){const matrix=[];const n=str2.length;const m=str1.length;if(n===0)return m;if(m===0)return n;for(let i=0;i<=n;i++){matrix[i]=[i];}for(let j=0;j<=m;j++){matrix[0][j]=j;}for(let i=1;i<=n;i++){for(let j=1;j<=m;j++){if(str2.charAt(i-1)===str1.charAt(j-1)){matrix[i][j]=matrix[i-1][j-1];}else{matrix[i][j]=Math.min(matrix[i-1][j-1]+1,matrix[i][j-1]+1,matrix[i-1][j]+1);}}}return matrix[n][m];}// CAPTURE HIGH-QUALITY FRAME\nasync captureHighQualityFrame(videoElement){const canvas=document.createElement('canvas');const ctx=canvas.getContext('2d');canvas.width=videoElement.videoWidth;canvas.height=videoElement.videoHeight;ctx.imageSmoothingEnabled=true;ctx.imageSmoothingQuality='high';ctx.drawImage(videoElement,0,0);return{canvas:canvas,width:canvas.width,height:canvas.height,imageData:ctx.getImageData(0,0,canvas.width,canvas.height)};}frameToBase64(frameData){return frameData.canvas.toDataURL('image/jpeg',0.8);// 🔥 Slightly lower quality for faster upload\n}// 🔥 IMPROVED: FORMAT MTG SCANNER RESULT with stricter requirements\nformatMTGScannerResult(result,processingTime){if(result.hasCard&&result.confidence>=80&&result.cardName&&result.cardName.length>=3){return{hasCard:true,cardName:result.cardName,confidence:result.confidence,setInfo:result.setInfo||'Unknown Set',cardType:result.cardType||'Unknown Type',manaCost:result.manaCost||'',rarity:result.rarity||'Unknown',colors:result.colors||[],imageUri:result.imageUri||'',scryfallUri:result.scryfallUri||'',method:'improved_mtg_gemini_scryfall',isVerified:result.isVerified||false,isFuzzyMatch:result.isFuzzyMatch||false,verificationSource:result.verificationSource||'none',processingTime:processingTime,timestamp:new Date().toISOString(),scryfallLoaded:this.scryfallLoaded};}else{const reason=result.confidence<80?'LOW_CONFIDENCE':'NO_MTG_CARD_DETECTED';const message=result.confidence<80?\"MTG card detected but confidence too low (\".concat(result.confidence,\"%) - improve lighting/angle\"):'No Magic: The Gathering card detected - position card clearly in view';return{hasCard:false,message:message,reason:reason,confidence:result.confidence||0,method:'improved_mtg_gemini_scryfall',processingTime:processingTime,timestamp:new Date().toISOString(),scryfallLoaded:this.scryfallLoaded};}}// 🔥 IMPROVED: MTG FALLBACK with better error messages\nasync mtgFallback(videoElement,processingTime){this.log('⚠️ MTG Vision unavailable, using fallback...');let fallbackMessage='MTG Scanner temporarily unavailable - please try again';if(this.consecutiveErrors>3){fallbackMessage='Too many errors - please check internet connection and try again later';}else if(this.consecutiveErrors>1){fallbackMessage='MTG Scanner experiencing issues - retrying with longer intervals';}return{hasCard:false,message:fallbackMessage,reason:'SCANNER_ERROR',confidence:0,method:'improved_mtg_fallback',processingTime:processingTime,timestamp:new Date().toISOString(),scryfallLoaded:this.scryfallLoaded,consecutiveErrors:this.consecutiveErrors};}// HELPER METHODS\nextractCardNameFromText(text){const lines=text.split('\\n');for(const line of lines){const trimmed=line.trim();if(trimmed.length>3&&trimmed.length<50&&/^[A-Z]/.test(trimmed)&&!trimmed.includes('http')&&!trimmed.includes('@')&&!trimmed.includes('CARD_NAME')){return trimmed;}}return'Unknown Card';}// COMPATIBILITY METHODS\nasync scanCard(imageSrc){let cardType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'standard';if(imageSrc&&imageSrc.tagName==='VIDEO'){return await this.processVideoFrame(imageSrc);}return{success:false,confidence:0,message:'Only video processing supported'};}async processCardImage(imageSrc){let cardType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'standard';return{success:false,confidence:0,message:'Only video processing supported'};}setupCanvas(width,height){if(!this.canvas){this.canvas=document.createElement('canvas');this.ctx=this.canvas.getContext('2d');}this.canvas.width=width;this.canvas.height=height;return{canvas:this.canvas,ctx:this.ctx};}// 🔥 NEW: Reset method for when user wants to clear errors\nresetErrorState(){this.consecutiveErrors=0;this.lastFrameHash=null;this.lastSuccessfulDetection=null;this.lastSuccessfulTime=0;console.log('🔄 Vision service error state reset');}}export default GeminiVisionService;","map":{"version":3,"names":["GeminiVisionService","constructor","console","log","canvas","ctx","debugMode","geminiApiKey","geminiApiUrl","lastGeminiCall","geminiRateLimit","consecutiveErrors","backoffMultiplier","lastFrameHash","frameSimilarityThreshold","lastSuccessfulDetection","lastSuccessfulTime","scryfallData","Map","scryfallLoaded","loadingScryfallData","initializeScryfallData","bulkResponse","fetch","bulkInfo","json","oracleCards","data","find","item","type","Error","size","Math","round","updated","updated_at","cardsResponse","download_uri","cardsData","processedCards","card","lang","_card$image_uris","cardKey","name","toLowerCase","set","oracle_id","set_name","set_code","type_line","mana_cost","cmc","colors","rarity","image_uri","image_uris","normal","scryfall_uri","error","message","arguments","length","undefined","concat","calculateFrameHash","imageData","hash","step","floor","i","isFrameSimilarToLast","frameData","getContext","getImageData","width","height","currentHash","hashDifference","abs","isSimilar","processVideoFrame","videoElement","startTime","performance","now","captureHighQualityFrame","Date","hasCard","confidence","method","processingTime","timestamp","toISOString","geminiResult","callGeminiVisionForMTG","enhancedResult","enhanceWithScryfallData","finalResult","formatMTGScannerResult","mtgFallback","actualRateLimit","pow","min","waitTime","imageBase64","frameToBase64","base64Data","split","mtgPrompt","requestBody","contents","parts","text","inline_data","mime_type","generationConfig","temperature","topK","topP","maxOutputTokens","response","headers","body","JSON","stringify","status","statusText","ok","errorText","candidates","content","responseText","mtgAnalysis","parseMTGResponse","includes","cardName","reason","lines","result","manaCost","cardType","setInfo","rulesText","line","trimmedLine","trim","startsWith","replace","confStr","parseInt","enhanced","_objectSpread","has","scryfallCard","get","imageUri","scryfallUri","verificationSource","isVerified","fuzzyMatch","scryfallFuzzyMatch","found","isFuzzyMatch","matchScore","score","originalDetection","bestMatch","bestScore","minScore","key","calculateSimilarity","str1","str2","longer","shorter","distance","levenshteinDistance","matrix","n","m","j","charAt","document","createElement","videoWidth","videoHeight","imageSmoothingEnabled","imageSmoothingQuality","drawImage","toDataURL","fallbackMessage","extractCardNameFromText","trimmed","test","scanCard","imageSrc","tagName","success","processCardImage","setupCanvas","resetErrorState"],"sources":["C:/Users/kim-a/Documents/DiceyTeck/MTG Scanner BACKUP/src/ClaudeVisionService.js"],"sourcesContent":["// MTG-Focused GeminiVisionService.js - IMPROVED RATE LIMITING\r\nclass GeminiVisionService {\r\n    constructor() {\r\n        console.log('🧠 MTG CARD SCANNER - GEMINI + SCRYFALL INTEGRATION!');\r\n        this.canvas = null;\r\n        this.ctx = null;\r\n        this.debugMode = true;\r\n        \r\n        // 🔥 IMPROVED GOOGLE GEMINI API CONFIGURATION\r\n        this.geminiApiKey = 'AIzaSyBtqyUy1X3BdNtUAW88QZWbtqI39MbUDdk';\r\n        this.geminiApiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';\r\n        this.lastGeminiCall = 0;\r\n        this.geminiRateLimit = 4000; // 🔥 INCREASED from 1000ms to 4000ms (4 seconds)\r\n        this.consecutiveErrors = 0;\r\n        this.backoffMultiplier = 1.5;\r\n        \r\n        // 🔥 NEW: Frame similarity detection to avoid duplicate API calls\r\n        this.lastFrameHash = null;\r\n        this.frameSimilarityThreshold = 0.95;\r\n        this.lastSuccessfulDetection = null;\r\n        this.lastSuccessfulTime = 0;\r\n        \r\n        // SCRYFALL INTEGRATION\r\n        this.scryfallData = new Map();\r\n        this.scryfallLoaded = false;\r\n        this.loadingScryfallData = false;\r\n        \r\n        console.log('✅ Gemini Vision API initialized successfully');\r\n        console.log('🔧 MTG-focused scanner with Scryfall database integration');\r\n        console.log('📦 Loading Scryfall MTG database...');\r\n        \r\n        // Start loading Scryfall data\r\n        this.initializeScryfallData();\r\n        \r\n        this.log('🚀 MTG Scanner initialized - preparing Scryfall database');\r\n    }\r\n\r\n    async initializeScryfallData() {\r\n        if (this.loadingScryfallData || this.scryfallLoaded) return;\r\n        \r\n        this.loadingScryfallData = true;\r\n        console.log('📦 Loading Scryfall MTG card database...');\r\n        \r\n        try {\r\n            // Get bulk data info from Scryfall\r\n            const bulkResponse = await fetch('https://api.scryfall.com/bulk-data');\r\n            const bulkInfo = await bulkResponse.json();\r\n            \r\n            // Find the Oracle Cards bulk data (best for card identification)\r\n            const oracleCards = bulkInfo.data.find(item => item.type === 'oracle_cards');\r\n            \r\n            if (!oracleCards) {\r\n                throw new Error('Oracle cards bulk data not found');\r\n            }\r\n            \r\n            console.log('⬇️ Downloading Scryfall Oracle Cards database...');\r\n            console.log('📊 Database info:', {\r\n                size: Math.round(oracleCards.size / 1024 / 1024) + ' MB',\r\n                updated: oracleCards.updated_at\r\n            });\r\n            \r\n            // Download the actual card data\r\n            const cardsResponse = await fetch(oracleCards.download_uri);\r\n            const cardsData = await cardsResponse.json();\r\n            \r\n            // Process and index the cards for fast lookup\r\n            let processedCards = 0;\r\n            for (const card of cardsData) {\r\n                if (card.lang === 'en') { // Only English cards\r\n                    const cardKey = card.name.toLowerCase();\r\n                    this.scryfallData.set(cardKey, {\r\n                        name: card.name,\r\n                        oracle_id: card.oracle_id,\r\n                        set: card.set_name,\r\n                        set_code: card.set,\r\n                        type_line: card.type_line,\r\n                        mana_cost: card.mana_cost || '',\r\n                        cmc: card.cmc || 0,\r\n                        colors: card.colors || [],\r\n                        rarity: card.rarity,\r\n                        image_uri: card.image_uris?.normal || '',\r\n                        scryfall_uri: card.scryfall_uri\r\n                    });\r\n                    processedCards++;\r\n                }\r\n            }\r\n            \r\n            this.scryfallLoaded = true;\r\n            console.log('✅ Scryfall database loaded successfully!');\r\n            console.log('📊 Total MTG cards in database:', processedCards);\r\n            console.log('🎯 MTG Scanner ready for professional card identification!');\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Failed to load Scryfall database:', error);\r\n            console.log('⚠️ Falling back to basic MTG card detection');\r\n            this.scryfallLoaded = false;\r\n        } finally {\r\n            this.loadingScryfallData = false;\r\n        }\r\n    }\r\n\r\n    log(message, data = null) {\r\n        if (this.debugMode) {\r\n            console.log(`🧠 ${message}`, data || '');\r\n        }\r\n    }\r\n\r\n    // 🔥 NEW: Calculate simple frame hash for similarity detection\r\n    calculateFrameHash(imageData) {\r\n        let hash = 0;\r\n        const step = Math.floor(imageData.length / 100); // Sample 100 points\r\n        \r\n        for (let i = 0; i < imageData.length; i += step) {\r\n            hash = ((hash << 5) - hash + imageData[i]) & 0xffffffff;\r\n        }\r\n        \r\n        return hash;\r\n    }\r\n\r\n    // 🔥 NEW: Check if current frame is too similar to last frame\r\n    isFrameSimilarToLast(frameData) {\r\n        const canvas = frameData.canvas;\r\n        const ctx = canvas.getContext('2d');\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const currentHash = this.calculateFrameHash(imageData.data);\r\n        \r\n        if (this.lastFrameHash === null) {\r\n            this.lastFrameHash = currentHash;\r\n            return false;\r\n        }\r\n        \r\n        // Simple similarity check - if hash is identical or very close, skip\r\n        const hashDifference = Math.abs(currentHash - this.lastFrameHash);\r\n        const isSimilar = hashDifference < 1000; // Threshold for \"too similar\"\r\n        \r\n        this.lastFrameHash = currentHash;\r\n        \r\n        if (isSimilar) {\r\n            console.log('⏭️ Frame too similar to last, skipping API call');\r\n        }\r\n        \r\n        return isSimilar;\r\n    }\r\n\r\n    // MAIN PROCESSING METHOD - MTG FOCUSED\r\n    async processVideoFrame(videoElement) {\r\n        this.log('🔄 Processing frame for MTG CARD IDENTIFICATION...');\r\n        const startTime = performance.now();\r\n        \r\n        try {\r\n            // Step 1: Capture frame\r\n            const frameData = await this.captureHighQualityFrame(videoElement);\r\n            this.log('📷 Frame captured', `${frameData.width}x${frameData.height}`);\r\n            \r\n            // 🔥 NEW: Check frame similarity to avoid duplicate API calls\r\n            if (this.isFrameSimilarToLast(frameData)) {\r\n                // Return last successful detection if we have one and it's recent\r\n                if (this.lastSuccessfulDetection && \r\n                    Date.now() - this.lastSuccessfulTime < 5000) {\r\n                    this.log('♻️ Returning cached detection for similar frame');\r\n                    return this.lastSuccessfulDetection;\r\n                }\r\n                \r\n                // Otherwise return no detection\r\n                return {\r\n                    hasCard: false,\r\n                    message: 'Frame unchanged, skipping scan',\r\n                    confidence: 0,\r\n                    method: 'frame_similarity_skip',\r\n                    processingTime: Math.round(performance.now() - startTime),\r\n                    timestamp: new Date().toISOString()\r\n                };\r\n            }\r\n            \r\n            // Step 2: MTG-focused Gemini Vision analysis\r\n            const geminiResult = await this.callGeminiVisionForMTG(frameData);\r\n            this.log('🎯 Gemini MTG analysis result', geminiResult);\r\n            \r\n            // Step 3: Enhance with Scryfall database\r\n            const enhancedResult = await this.enhanceWithScryfallData(geminiResult, frameData);\r\n            this.log('✨ Scryfall-enhanced result', enhancedResult);\r\n            \r\n            const processingTime = Math.round(performance.now() - startTime);\r\n            const finalResult = this.formatMTGScannerResult(enhancedResult, processingTime);\r\n            \r\n            // Cache successful detections\r\n            if (finalResult.hasCard && finalResult.confidence >= 80) {\r\n                this.lastSuccessfulDetection = finalResult;\r\n                this.lastSuccessfulTime = Date.now();\r\n                this.consecutiveErrors = 0; // Reset error count on success\r\n            }\r\n            \r\n            return finalResult;\r\n            \r\n        } catch (error) {\r\n            this.log('❌ MTG scanning error, using fallback', error.message);\r\n            this.consecutiveErrors++;\r\n            const processingTime = Math.round(performance.now() - startTime);\r\n            return await this.mtgFallback(videoElement, processingTime);\r\n        }\r\n    }\r\n\r\n    // 🔥 IMPROVED: MTG-OPTIMIZED GEMINI VISION CALL with better rate limiting\r\n    async callGeminiVisionForMTG(frameData) {\r\n        this.log('🧠 Calling Gemini Vision for MTG CARD IDENTIFICATION...');\r\n        \r\n        // 🔥 IMPROVED: Dynamic rate limiting with backoff\r\n        const now = Date.now();\r\n        let actualRateLimit = this.geminiRateLimit;\r\n        \r\n        // Apply exponential backoff if we've had consecutive errors\r\n        if (this.consecutiveErrors > 0) {\r\n            actualRateLimit = this.geminiRateLimit * Math.pow(this.backoffMultiplier, this.consecutiveErrors);\r\n            actualRateLimit = Math.min(actualRateLimit, 30000); // Max 30 seconds\r\n            console.log(`⏳ Applying backoff: ${actualRateLimit}ms (errors: ${this.consecutiveErrors})`);\r\n        }\r\n        \r\n        if (now - this.lastGeminiCall < actualRateLimit) {\r\n            const waitTime = actualRateLimit - (now - this.lastGeminiCall);\r\n            this.log(`⏳ Rate limiting: waiting ${waitTime}ms`);\r\n            throw new Error(`Rate limited - wait ${waitTime}ms between calls`);\r\n        }\r\n        this.lastGeminiCall = now;\r\n        \r\n        // Convert frame to base64\r\n        const imageBase64 = this.frameToBase64(frameData);\r\n        const base64Data = imageBase64.split(',')[1];\r\n        this.log('📤 Image ready for MTG analysis, size:', base64Data.length);\r\n        \r\n        // 🔥 IMPROVED: More specific MTG prompt\r\n        const mtgPrompt = `You are an expert Magic: The Gathering card identifier. Analyze this image ONLY for MTG cards.\r\n\r\nCRITICAL RULES:\r\n1. If this is NOT a Magic: The Gathering card, respond with \"NOT_MTG_CARD\"\r\n2. Only identify cards with 90%+ confidence\r\n3. Focus on the card name in the title area\r\n4. Ignore blurry, partial, or unclear cards\r\n\r\nIf you see a clear MTG card, identify:\r\n- CARD NAME (exact spelling, most important)\r\n- Mana cost from top-right corner\r\n- Card type (Creature, Instant, etc.)\r\n- Set symbol if clearly visible\r\n\r\nRESPOND EXACTLY LIKE THIS:\r\nCARD_NAME: [exact card name]\r\nMANA_COST: [symbols like {R}, {2}{U}, etc.]\r\nTYPE: [card type line]\r\nSET: [set name if visible, otherwise \"Unknown\"]\r\nTEXT: [first line of rules text if clearly visible]\r\nCONFIDENCE: [80-100 only for clear cards]\r\n\r\nONLY analyze clear, well-lit MTG cards. Reject anything unclear.`;\r\n\r\n        const requestBody = {\r\n            contents: [{\r\n                parts: [\r\n                    { text: mtgPrompt },\r\n                    {\r\n                        inline_data: {\r\n                            mime_type: \"image/jpeg\",\r\n                            data: base64Data\r\n                        }\r\n                    }\r\n                ]\r\n            }],\r\n            generationConfig: {\r\n                temperature: 0.1, // 🔥 Lower temperature for more consistent results\r\n                topK: 1,\r\n                topP: 0.8,\r\n                maxOutputTokens: 200 // 🔥 Limit output length\r\n            }\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${this.geminiApiUrl}?key=${this.geminiApiKey}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(requestBody)\r\n            });\r\n\r\n            this.log('📥 Response received:', {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                ok: response.ok\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                this.log('❌ Gemini error response:', errorText);\r\n                \r\n                // 🔥 Check for specific rate limit errors\r\n                if (response.status === 429) {\r\n                    this.consecutiveErrors++;\r\n                    throw new Error(`Gemini rate limited: ${response.status} - Implementing longer backoff`);\r\n                }\r\n                \r\n                throw new Error(`Gemini error: ${response.status} - ${errorText}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            \r\n            // Check if response has expected structure\r\n            if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {\r\n                throw new Error('Invalid Gemini response structure');\r\n            }\r\n            \r\n            // CRITICAL: LOG THE RAW RESPONSE TO DEBUG JSON PARSING\r\n            const responseText = data.candidates[0].content.parts[0].text;\r\n            console.log('🎯 RAW GEMINI RESPONSE (for debugging):');\r\n            console.log('---START RESPONSE---');\r\n            console.log(responseText);\r\n            console.log('---END RESPONSE---');\r\n            \r\n            // Parse MTG-specific response format\r\n            const mtgAnalysis = this.parseMTGResponse(responseText);\r\n            this.log('✅ MTG parsing successful:', mtgAnalysis);\r\n            \r\n            return mtgAnalysis;\r\n\r\n        } catch (error) {\r\n            this.log('❌ Gemini MTG Vision call failed:', error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // 🔥 IMPROVED: Parse MTG-specific response with better error handling\r\n    parseMTGResponse(responseText) {\r\n        if (!responseText || responseText.includes('NOT_MTG_CARD')) {\r\n            return {\r\n                hasCard: false,\r\n                cardName: '',\r\n                confidence: 0,\r\n                reason: 'Not a Magic: The Gathering card'\r\n            };\r\n        }\r\n        \r\n        const lines = responseText.split('\\n');\r\n        const result = {\r\n            hasCard: true,\r\n            cardName: '',\r\n            manaCost: '',\r\n            cardType: '',\r\n            setInfo: '',\r\n            rulesText: '',\r\n            confidence: 50\r\n        };\r\n        \r\n        for (const line of lines) {\r\n            const trimmedLine = line.trim();\r\n            if (trimmedLine.startsWith('CARD_NAME:')) {\r\n                result.cardName = trimmedLine.replace('CARD_NAME:', '').trim();\r\n            } else if (trimmedLine.startsWith('MANA_COST:')) {\r\n                result.manaCost = trimmedLine.replace('MANA_COST:', '').trim();\r\n            } else if (trimmedLine.startsWith('TYPE:')) {\r\n                result.cardType = trimmedLine.replace('TYPE:', '').trim();\r\n            } else if (trimmedLine.startsWith('SET:')) {\r\n                result.setInfo = trimmedLine.replace('SET:', '').trim();\r\n            } else if (trimmedLine.startsWith('TEXT:')) {\r\n                result.rulesText = trimmedLine.replace('TEXT:', '').trim();\r\n            } else if (trimmedLine.startsWith('CONFIDENCE:')) {\r\n                const confStr = trimmedLine.replace('CONFIDENCE:', '').trim();\r\n                result.confidence = parseInt(confStr) || 50;\r\n            }\r\n        }\r\n        \r\n        // 🔥 Validation: Must have card name and reasonable confidence\r\n        if (!result.cardName || result.cardName.length < 3) {\r\n            return {\r\n                hasCard: false,\r\n                cardName: '',\r\n                confidence: 0,\r\n                reason: 'No valid card name detected'\r\n            };\r\n        }\r\n        \r\n        // 🔥 Must have high confidence for MTG cards\r\n        if (result.confidence < 80) {\r\n            return {\r\n                hasCard: false,\r\n                cardName: result.cardName,\r\n                confidence: result.confidence,\r\n                reason: `Confidence too low: ${result.confidence}%`\r\n            };\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    // ENHANCE WITH SCRYFALL DATABASE\r\n    async enhanceWithScryfallData(geminiResult, frameData) {\r\n        this.log('✨ Enhancing with Scryfall MTG database...');\r\n        \r\n        if (!this.scryfallLoaded) {\r\n            this.log('⚠️ Scryfall database not loaded yet, using basic enhancement');\r\n            return geminiResult;\r\n        }\r\n        \r\n        let enhanced = { ...geminiResult };\r\n        \r\n        if (geminiResult.hasCard && geminiResult.cardName) {\r\n            const cardKey = geminiResult.cardName.toLowerCase().trim();\r\n            \r\n            // Direct Scryfall lookup\r\n            if (this.scryfallData.has(cardKey)) {\r\n                const scryfallCard = this.scryfallData.get(cardKey);\r\n                enhanced = {\r\n                    ...enhanced,\r\n                    cardName: scryfallCard.name, // Use official name\r\n                    setInfo: scryfallCard.set,\r\n                    cardType: scryfallCard.type_line,\r\n                    manaCost: scryfallCard.mana_cost,\r\n                    rarity: scryfallCard.rarity,\r\n                    colors: scryfallCard.colors,\r\n                    imageUri: scryfallCard.image_uri,\r\n                    scryfallUri: scryfallCard.scryfall_uri,\r\n                    confidence: Math.min(enhanced.confidence + 10, 98), // 🔥 Smaller boost\r\n                    verificationSource: 'scryfall_exact_match',\r\n                    isVerified: true\r\n                };\r\n                this.log('✅ EXACT MATCH found in Scryfall database:', scryfallCard.name);\r\n            } else {\r\n                // Fuzzy matching in Scryfall database\r\n                const fuzzyMatch = this.scryfallFuzzyMatch(cardKey);\r\n                if (fuzzyMatch.found) {\r\n                    enhanced = {\r\n                        ...enhanced,\r\n                        cardName: fuzzyMatch.card.name,\r\n                        setInfo: fuzzyMatch.card.set,\r\n                        cardType: fuzzyMatch.card.type_line,\r\n                        manaCost: fuzzyMatch.card.mana_cost,\r\n                        confidence: Math.min(enhanced.confidence + 5, 95), // 🔥 Smaller boost for fuzzy\r\n                        verificationSource: 'scryfall_fuzzy_match',\r\n                        isFuzzyMatch: true,\r\n                        matchScore: fuzzyMatch.score,\r\n                        originalDetection: geminiResult.cardName\r\n                    };\r\n                    this.log('⚠️ FUZZY MATCH found in Scryfall:', fuzzyMatch.card.name);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return enhanced;\r\n    }\r\n\r\n    // SCRYFALL FUZZY MATCHING\r\n    scryfallFuzzyMatch(cardName) {\r\n        let bestMatch = null;\r\n        let bestScore = 0;\r\n        const minScore = 0.8; // 🔥 Higher threshold for fuzzy matching\r\n        \r\n        // Search through Scryfall database\r\n        for (const [key, card] of this.scryfallData) {\r\n            const score = this.calculateSimilarity(cardName, key);\r\n            if (score > bestScore && score >= minScore) {\r\n                bestScore = score;\r\n                bestMatch = card;\r\n            }\r\n        }\r\n        \r\n        return bestMatch ? \r\n            { found: true, card: bestMatch, score: bestScore } : \r\n            { found: false, card: null, score: 0 };\r\n    }\r\n\r\n    // STRING SIMILARITY CALCULATION\r\n    calculateSimilarity(str1, str2) {\r\n        const longer = str1.length > str2.length ? str1 : str2;\r\n        const shorter = str1.length > str2.length ? str2 : str1;\r\n        \r\n        if (longer.length === 0) return 1.0;\r\n        \r\n        const distance = this.levenshteinDistance(longer, shorter);\r\n        return (longer.length - distance) / longer.length;\r\n    }\r\n\r\n    levenshteinDistance(str1, str2) {\r\n        const matrix = [];\r\n        const n = str2.length;\r\n        const m = str1.length;\r\n\r\n        if (n === 0) return m;\r\n        if (m === 0) return n;\r\n\r\n        for (let i = 0; i <= n; i++) {\r\n            matrix[i] = [i];\r\n        }\r\n\r\n        for (let j = 0; j <= m; j++) {\r\n            matrix[0][j] = j;\r\n        }\r\n\r\n        for (let i = 1; i <= n; i++) {\r\n            for (let j = 1; j <= m; j++) {\r\n                if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\r\n                    matrix[i][j] = matrix[i - 1][j - 1];\r\n                } else {\r\n                    matrix[i][j] = Math.min(\r\n                        matrix[i - 1][j - 1] + 1,\r\n                        matrix[i][j - 1] + 1,\r\n                        matrix[i - 1][j] + 1\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        return matrix[n][m];\r\n    }\r\n\r\n    // CAPTURE HIGH-QUALITY FRAME\r\n    async captureHighQualityFrame(videoElement) {\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        canvas.width = videoElement.videoWidth;\r\n        canvas.height = videoElement.videoHeight;\r\n        \r\n        ctx.imageSmoothingEnabled = true;\r\n        ctx.imageSmoothingQuality = 'high';\r\n        ctx.drawImage(videoElement, 0, 0);\r\n        \r\n        return {\r\n            canvas: canvas,\r\n            width: canvas.width,\r\n            height: canvas.height,\r\n            imageData: ctx.getImageData(0, 0, canvas.width, canvas.height)\r\n        };\r\n    }\r\n\r\n    frameToBase64(frameData) {\r\n        return frameData.canvas.toDataURL('image/jpeg', 0.8); // 🔥 Slightly lower quality for faster upload\r\n    }\r\n\r\n    // 🔥 IMPROVED: FORMAT MTG SCANNER RESULT with stricter requirements\r\n    formatMTGScannerResult(result, processingTime) {\r\n        if (result.hasCard && result.confidence >= 80 && result.cardName && result.cardName.length >= 3) {\r\n            return {\r\n                hasCard: true,\r\n                cardName: result.cardName,\r\n                confidence: result.confidence,\r\n                setInfo: result.setInfo || 'Unknown Set',\r\n                cardType: result.cardType || 'Unknown Type',\r\n                manaCost: result.manaCost || '',\r\n                rarity: result.rarity || 'Unknown',\r\n                colors: result.colors || [],\r\n                imageUri: result.imageUri || '',\r\n                scryfallUri: result.scryfallUri || '',\r\n                method: 'improved_mtg_gemini_scryfall',\r\n                isVerified: result.isVerified || false,\r\n                isFuzzyMatch: result.isFuzzyMatch || false,\r\n                verificationSource: result.verificationSource || 'none',\r\n                processingTime: processingTime,\r\n                timestamp: new Date().toISOString(),\r\n                scryfallLoaded: this.scryfallLoaded\r\n            };\r\n        } else {\r\n            const reason = result.confidence < 80 ? 'LOW_CONFIDENCE' : 'NO_MTG_CARD_DETECTED';\r\n            const message = result.confidence < 80 ? \r\n                `MTG card detected but confidence too low (${result.confidence}%) - improve lighting/angle` : \r\n                'No Magic: The Gathering card detected - position card clearly in view';\r\n                \r\n            return {\r\n                hasCard: false,\r\n                message: message,\r\n                reason: reason,\r\n                confidence: result.confidence || 0,\r\n                method: 'improved_mtg_gemini_scryfall',\r\n                processingTime: processingTime,\r\n                timestamp: new Date().toISOString(),\r\n                scryfallLoaded: this.scryfallLoaded\r\n            };\r\n        }\r\n    }\r\n\r\n    // 🔥 IMPROVED: MTG FALLBACK with better error messages\r\n    async mtgFallback(videoElement, processingTime) {\r\n        this.log('⚠️ MTG Vision unavailable, using fallback...');\r\n        \r\n        let fallbackMessage = 'MTG Scanner temporarily unavailable - please try again';\r\n        \r\n        if (this.consecutiveErrors > 3) {\r\n            fallbackMessage = 'Too many errors - please check internet connection and try again later';\r\n        } else if (this.consecutiveErrors > 1) {\r\n            fallbackMessage = 'MTG Scanner experiencing issues - retrying with longer intervals';\r\n        }\r\n        \r\n        return {\r\n            hasCard: false,\r\n            message: fallbackMessage,\r\n            reason: 'SCANNER_ERROR',\r\n            confidence: 0,\r\n            method: 'improved_mtg_fallback',\r\n            processingTime: processingTime,\r\n            timestamp: new Date().toISOString(),\r\n            scryfallLoaded: this.scryfallLoaded,\r\n            consecutiveErrors: this.consecutiveErrors\r\n        };\r\n    }\r\n\r\n    // HELPER METHODS\r\n    extractCardNameFromText(text) {\r\n        const lines = text.split('\\n');\r\n        for (const line of lines) {\r\n            const trimmed = line.trim();\r\n            if (trimmed.length > 3 && trimmed.length < 50 && /^[A-Z]/.test(trimmed) && \r\n                !trimmed.includes('http') && !trimmed.includes('@') && !trimmed.includes('CARD_NAME')) {\r\n                return trimmed;\r\n            }\r\n        }\r\n        return 'Unknown Card';\r\n    }\r\n\r\n    // COMPATIBILITY METHODS\r\n    async scanCard(imageSrc, cardType = 'standard') {\r\n        if (imageSrc && imageSrc.tagName === 'VIDEO') {\r\n            return await this.processVideoFrame(imageSrc);\r\n        }\r\n        return { success: false, confidence: 0, message: 'Only video processing supported' };\r\n    }\r\n\r\n    async processCardImage(imageSrc, cardType = 'standard') {\r\n        return { success: false, confidence: 0, message: 'Only video processing supported' };\r\n    }\r\n\r\n    setupCanvas(width, height) {\r\n        if (!this.canvas) {\r\n            this.canvas = document.createElement('canvas');\r\n            this.ctx = this.canvas.getContext('2d');\r\n        }\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n        return { canvas: this.canvas, ctx: this.ctx };\r\n    }\r\n\r\n    // 🔥 NEW: Reset method for when user wants to clear errors\r\n    resetErrorState() {\r\n        this.consecutiveErrors = 0;\r\n        this.lastFrameHash = null;\r\n        this.lastSuccessfulDetection = null;\r\n        this.lastSuccessfulTime = 0;\r\n        console.log('🔄 Vision service error state reset');\r\n    }\r\n}\r\n\r\nexport default GeminiVisionService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}