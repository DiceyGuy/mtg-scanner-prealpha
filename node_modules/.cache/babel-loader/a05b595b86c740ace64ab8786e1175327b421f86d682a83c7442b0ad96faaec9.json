{"ast":null,"code":"// MTG-Focused GeminiVisionService.js - WITH SCRYFALL INTEGRATION\n// import Tesseract from 'tesseract.js'; // Using Gemini AI instead\n\nclass GeminiVisionService {\n  constructor() {\n    console.log('?? MTG CARD SCANNER - GEMINI + SCRYFALL INTEGRATION!');\n    this.canvas = null;\n    this.ctx = null;\n    this.debugMode = true;\n\n    // GOOGLE GEMINI API CONFIGURATION\n    this.geminiApiKey = 'AIzaSyBtqyUy1X3BdNtUAW88QZWbtqI39MbUDdk';\n    this.geminiApiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';\n    this.lastGeminiCall = 0;\n    this.geminiRateLimit = 1000;\n\n    // SCRYFALL INTEGRATION\n    this.scryfallData = new Map(); // Will store card name -> card data\n    this.scryfallLoaded = false;\n    this.loadingScryfallData = false;\n    console.log('?? Gemini Vision API initialized successfully');\n    console.log('?? MTG-focused scanner with Scryfall database integration');\n    console.log('?? Loading Scryfall MTG database...');\n\n    // Start loading Scryfall data\n    this.initializeScryfallData();\n    this.log('?? MTG Scanner initialized - preparing Scryfall database');\n  }\n  async initializeScryfallData() {\n    if (this.loadingScryfallData || this.scryfallLoaded) return;\n    this.loadingScryfallData = true;\n    console.log('?? Loading Scryfall MTG card database...');\n    try {\n      // Get bulk data info from Scryfall\n      const bulkResponse = await fetch('https://api.scryfall.com/bulk-data');\n      const bulkInfo = await bulkResponse.json();\n\n      // Find the Oracle Cards bulk data (best for card identification)\n      const oracleCards = bulkInfo.data.find(item => item.type === 'oracle_cards');\n      if (!oracleCards) {\n        throw new Error('Oracle cards bulk data not found');\n      }\n      console.log('?? Downloading Scryfall Oracle Cards database...');\n      console.log('?? Database info:', {\n        size: Math.round(oracleCards.size / 1024 / 1024) + ' MB',\n        updated: oracleCards.updated_at\n      });\n\n      // Download the actual card data\n      const cardsResponse = await fetch(oracleCards.download_uri);\n      const cardsData = await cardsResponse.json();\n\n      // Process and index the cards for fast lookup\n      let processedCards = 0;\n      for (const card of cardsData) {\n        if (card.lang === 'en') {\n          var _card$image_uris;\n          // Only English cards\n          const cardKey = card.name.toLowerCase();\n          this.scryfallData.set(cardKey, {\n            name: card.name,\n            oracle_id: card.oracle_id,\n            set: card.set_name,\n            set_code: card.set,\n            type_line: card.type_line,\n            mana_cost: card.mana_cost || '',\n            cmc: card.cmc || 0,\n            colors: card.colors || [],\n            rarity: card.rarity,\n            image_uri: ((_card$image_uris = card.image_uris) === null || _card$image_uris === void 0 ? void 0 : _card$image_uris.normal) || '',\n            scryfall_uri: card.scryfall_uri\n          });\n          processedCards++;\n        }\n      }\n      this.scryfallLoaded = true;\n      console.log('? Scryfall database loaded successfully!');\n      console.log('?? Total MTG cards in database:', processedCards);\n      console.log('?? MTG Scanner ready for professional card identification!');\n    } catch (error) {\n      console.error('? Failed to load Scryfall database:', error);\n      console.log('?? Falling back to basic MTG card detection');\n      this.scryfallLoaded = false;\n    } finally {\n      this.loadingScryfallData = false;\n    }\n  }\n  log(message, data = null) {\n    if (this.debugMode) {\n      console.log(`?? ${message}`, data || '');\n    }\n  }\n\n  // MAIN PROCESSING METHOD - MTG FOCUSED\n  async processVideoFrame(videoElement) {\n    this.log('?? Processing frame for MTG CARD IDENTIFICATION...');\n    const startTime = performance.now();\n    try {\n      // Step 1: Capture frame\n      const frameData = await this.captureHighQualityFrame(videoElement);\n      this.log('?? Frame captured', `${frameData.width}x${frameData.height}`);\n\n      // Step 2: MTG-focused Gemini Vision analysis\n      const geminiResult = await this.callGeminiVisionForMTG(frameData);\n      this.log('?? Gemini MTG analysis result', geminiResult);\n\n      // Step 3: Enhance with Scryfall database\n      const enhancedResult = await this.enhanceWithScryfallData(geminiResult, frameData);\n      this.log('? Scryfall-enhanced result', enhancedResult);\n      const processingTime = Math.round(performance.now() - startTime);\n      return this.formatMTGScannerResult(enhancedResult, processingTime);\n    } catch (error) {\n      this.log('? MTG scanning error, using fallback', error.message);\n      const processingTime = Math.round(performance.now() - startTime);\n      return await this.mtgFallback(videoElement, processingTime);\n    }\n  }\n\n  // MTG-OPTIMIZED GEMINI VISION CALL\n  async callGeminiVisionForMTG(frameData) {\n    this.log('?? Calling Gemini Vision for MTG CARD IDENTIFICATION...');\n\n    // Rate limiting\n    const now = Date.now();\n    if (now - this.lastGeminiCall < this.geminiRateLimit) {\n      const waitTime = this.geminiRateLimit - (now - this.lastGeminiCall);\n      this.log(`? Rate limiting: waiting ${waitTime}ms`);\n      throw new Error(`Rate limited - wait ${waitTime}ms between calls`);\n    }\n    this.lastGeminiCall = now;\n\n    // Convert frame to base64\n    const imageBase64 = this.frameToBase64(frameData);\n    const base64Data = imageBase64.split(',')[1];\n    this.log('?? Image ready for MTG analysis, size:', base64Data.length);\n\n    // MAGIC: THE GATHERING SPECIFIC PROMPT\n    const mtgPrompt = `You are a Magic: The Gathering card identification expert. Analyze this image ONLY for Magic: The Gathering cards.\n\nIMPORTANT: If this is NOT a Magic: The Gathering card, respond with \"NOT_MTG_CARD\".\n\nIf you see a Magic: The Gathering card, identify:\n1. CARD NAME (most critical) - exact spelling\n2. Mana cost (symbols in top right)\n3. Card type line (Creature, Instant, Sorcery, etc.)\n4. Set symbol if visible\n5. Any visible rules text\n\nRESPOND IN EXACTLY THIS FORMAT:\nCARD_NAME: [exact card name]\nMANA_COST: [mana symbols]\nTYPE: [card type]\nSET: [set if visible]\nTEXT: [any visible rules text]\nCONFIDENCE: [1-100]\n\nExamples:\nCARD_NAME: Lightning Bolt\nMANA_COST: R\nTYPE: Instant\nSET: Unknown\nTEXT: Lightning Bolt deals 3 damage to any target\nCONFIDENCE: 95\n\nOnly analyze Magic: The Gathering cards. Ignore all other objects.`;\n    const requestBody = {\n      contents: [{\n        parts: [{\n          text: mtgPrompt\n        }, {\n          inline_data: {\n            mime_type: \"image/jpeg\",\n            data: base64Data\n          }\n        }]\n      }]\n    };\n    try {\n      const response = await fetch(`${this.geminiApiUrl}?key=${this.geminiApiKey}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      this.log('?? Response received:', {\n        status: response.status,\n        statusText: response.statusText,\n        ok: response.ok\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        this.log('? Gemini error response:', errorText);\n        throw new Error(`Gemini error: ${response.status} - ${errorText}`);\n      }\n      const data = await response.json();\n\n      // CRITICAL: LOG THE RAW RESPONSE TO DEBUG JSON PARSING\n      const responseText = data.candidates[0].content.parts[0].text;\n      console.log('?? RAW GEMINI RESPONSE (for debugging):');\n      console.log('---START RESPONSE---');\n      console.log(responseText);\n      console.log('---END RESPONSE---');\n\n      // Parse MTG-specific response format\n      const mtgAnalysis = this.parseMTGResponse(responseText);\n      this.log('? MTG parsing successful:', mtgAnalysis);\n      return mtgAnalysis;\n    } catch (error) {\n      this.log('? Gemini MTG Vision call failed:', error.message);\n      throw error;\n    }\n  }\n\n  // PARSE MTG-SPECIFIC RESPONSE\n  parseMTGResponse(responseText) {\n    if (responseText.includes('NOT_MTG_CARD')) {\n      return {\n        hasCard: false,\n        cardName: '',\n        confidence: 0,\n        reason: 'Not a Magic: The Gathering card'\n      };\n    }\n    const lines = responseText.split('\\n');\n    const result = {\n      hasCard: true,\n      cardName: '',\n      manaCost: '',\n      cardType: '',\n      setInfo: '',\n      rulesText: '',\n      confidence: 50\n    };\n    for (const line of lines) {\n      const trimmedLine = line.trim();\n      if (trimmedLine.startsWith('CARD_NAME:')) {\n        result.cardName = trimmedLine.replace('CARD_NAME:', '').trim();\n      } else if (trimmedLine.startsWith('MANA_COST:')) {\n        result.manaCost = trimmedLine.replace('MANA_COST:', '').trim();\n      } else if (trimmedLine.startsWith('TYPE:')) {\n        result.cardType = trimmedLine.replace('TYPE:', '').trim();\n      } else if (trimmedLine.startsWith('SET:')) {\n        result.setInfo = trimmedLine.replace('SET:', '').trim();\n      } else if (trimmedLine.startsWith('TEXT:')) {\n        result.rulesText = trimmedLine.replace('TEXT:', '').trim();\n      } else if (trimmedLine.startsWith('CONFIDENCE:')) {\n        result.confidence = parseInt(trimmedLine.replace('CONFIDENCE:', '').trim()) || 50;\n      }\n    }\n\n    // If no card name found, try extracting from raw text\n    if (!result.cardName) {\n      result.cardName = this.extractCardNameFromText(responseText);\n    }\n    return result;\n  }\n\n  // ENHANCE WITH SCRYFALL DATABASE\n  async enhanceWithScryfallData(geminiResult, frameData) {\n    this.log('? Enhancing with Scryfall MTG database...');\n    if (!this.scryfallLoaded) {\n      this.log('?? Scryfall database not loaded yet, using basic enhancement');\n      return geminiResult;\n    }\n    let enhanced = {\n      ...geminiResult\n    };\n    if (geminiResult.hasCard && geminiResult.cardName) {\n      const cardKey = geminiResult.cardName.toLowerCase().trim();\n\n      // Direct Scryfall lookup\n      if (this.scryfallData.has(cardKey)) {\n        const scryfallCard = this.scryfallData.get(cardKey);\n        enhanced = {\n          ...enhanced,\n          cardName: scryfallCard.name,\n          // Use official name\n          setInfo: scryfallCard.set,\n          cardType: scryfallCard.type_line,\n          manaCost: scryfallCard.mana_cost,\n          rarity: scryfallCard.rarity,\n          colors: scryfallCard.colors,\n          imageUri: scryfallCard.image_uri,\n          scryfallUri: scryfallCard.scryfall_uri,\n          confidence: Math.min(enhanced.confidence + 20, 95),\n          verificationSource: 'scryfall_exact_match',\n          isVerified: true\n        };\n        this.log('? EXACT MATCH found in Scryfall database:', scryfallCard.name);\n      } else {\n        // Fuzzy matching in Scryfall database\n        const fuzzyMatch = this.scryfallFuzzyMatch(cardKey);\n        if (fuzzyMatch.found) {\n          enhanced = {\n            ...enhanced,\n            cardName: fuzzyMatch.card.name,\n            setInfo: fuzzyMatch.card.set,\n            cardType: fuzzyMatch.card.type_line,\n            manaCost: fuzzyMatch.card.mana_cost,\n            confidence: Math.min(enhanced.confidence + 15, 90),\n            verificationSource: 'scryfall_fuzzy_match',\n            isFuzzyMatch: true,\n            matchScore: fuzzyMatch.score,\n            originalDetection: geminiResult.cardName\n          };\n          this.log('?? FUZZY MATCH found in Scryfall:', fuzzyMatch.card.name);\n        }\n      }\n    }\n    return enhanced;\n  }\n\n  // SCRYFALL FUZZY MATCHING\n  scryfallFuzzyMatch(cardName) {\n    let bestMatch = null;\n    let bestScore = 0;\n    const minScore = 0.7;\n\n    // Search through Scryfall database\n    for (const [key, card] of this.scryfallData) {\n      const score = this.calculateSimilarity(cardName, key);\n      if (score > bestScore && score >= minScore) {\n        bestScore = score;\n        bestMatch = card;\n      }\n    }\n    return bestMatch ? {\n      found: true,\n      card: bestMatch,\n      score: bestScore\n    } : {\n      found: false,\n      card: null,\n      score: 0\n    };\n  }\n\n  // STRING SIMILARITY CALCULATION\n  calculateSimilarity(str1, str2) {\n    const longer = str1.length > str2.length ? str1 : str2;\n    const shorter = str1.length > str2.length ? str2 : str1;\n    if (longer.length === 0) return 1.0;\n    const distance = this.levenshteinDistance(longer, shorter);\n    return (longer.length - distance) / longer.length;\n  }\n  levenshteinDistance(str1, str2) {\n    const matrix = [];\n    const n = str2.length;\n    const m = str1.length;\n    if (n === 0) return m;\n    if (m === 0) return n;\n    for (let i = 0; i <= n; i++) {\n      matrix[i] = [i];\n    }\n    for (let j = 0; j <= m; j++) {\n      matrix[0][j] = j;\n    }\n    for (let i = 1; i <= n; i++) {\n      for (let j = 1; j <= m; j++) {\n        if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n          matrix[i][j] = matrix[i - 1][j - 1];\n        } else {\n          matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, matrix[i][j - 1] + 1, matrix[i - 1][j] + 1);\n        }\n      }\n    }\n    return matrix[n][m];\n  }\n\n  // CAPTURE HIGH-QUALITY FRAME\n  async captureHighQualityFrame(videoElement) {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = videoElement.videoWidth;\n    canvas.height = videoElement.videoHeight;\n    ctx.imageSmoothingEnabled = true;\n    ctx.imageSmoothingQuality = 'high';\n    ctx.drawImage(videoElement, 0, 0);\n    return {\n      canvas: canvas,\n      width: canvas.width,\n      height: canvas.height,\n      imageData: ctx.getImageData(0, 0, canvas.width, canvas.height)\n    };\n  }\n  frameToBase64(frameData) {\n    return frameData.canvas.toDataURL('image/jpeg', 0.9);\n  }\n\n  // FORMAT MTG SCANNER RESULT\n  formatMTGScannerResult(result, processingTime) {\n    if (result.hasCard && result.confidence >= 60 && result.cardName && result.cardName.length >= 3) {\n      return {\n        hasCard: true,\n        cardName: result.cardName,\n        confidence: result.confidence,\n        setInfo: result.setInfo || 'Unknown Set',\n        cardType: result.cardType || 'Unknown Type',\n        manaCost: result.manaCost || '',\n        rarity: result.rarity || 'Unknown',\n        colors: result.colors || [],\n        imageUri: result.imageUri || '',\n        scryfallUri: result.scryfallUri || '',\n        method: 'mtg_gemini_scryfall',\n        isVerified: result.isVerified || false,\n        isFuzzyMatch: result.isFuzzyMatch || false,\n        verificationSource: result.verificationSource || 'none',\n        processingTime: processingTime,\n        timestamp: new Date().toISOString(),\n        scryfallLoaded: this.scryfallLoaded\n      };\n    } else {\n      const reason = result.confidence < 60 ? 'LOW_CONFIDENCE' : 'NO_MTG_CARD_DETECTED';\n      const message = result.confidence < 60 ? `MTG card detected but confidence too low (${result.confidence}%) - improve lighting/angle` : 'No Magic: The Gathering card detected - position card clearly in view';\n      return {\n        hasCard: false,\n        message: message,\n        reason: reason,\n        confidence: result.confidence || 0,\n        method: 'mtg_gemini_scryfall',\n        processingTime: processingTime,\n        timestamp: new Date().toISOString(),\n        scryfallLoaded: this.scryfallLoaded\n      };\n    }\n  }\n\n  // MTG FALLBACK\n  async mtgFallback(videoElement, processingTime) {\n    this.log('?? MTG Vision unavailable, using basic fallback...');\n    return {\n      hasCard: false,\n      message: 'MTG Scanner temporarily unavailable - please try again',\n      reason: 'SCANNER_ERROR',\n      confidence: 0,\n      method: 'mtg_fallback',\n      processingTime: processingTime,\n      timestamp: new Date().toISOString(),\n      scryfallLoaded: this.scryfallLoaded\n    };\n  }\n\n  // HELPER METHODS\n  extractCardNameFromText(text) {\n    const lines = text.split('\\n');\n    for (const line of lines) {\n      const trimmed = line.trim();\n      if (trimmed.length > 3 && trimmed.length < 50 && /^[A-Z]/.test(trimmed) && !trimmed.includes('http') && !trimmed.includes('@') && !trimmed.includes('CARD_NAME')) {\n        return trimmed;\n      }\n    }\n    return 'Unknown Card';\n  }\n\n  // COMPATIBILITY METHODS\n  async scanCard(imageSrc, cardType = 'standard') {\n    if (imageSrc && imageSrc.tagName === 'VIDEO') {\n      return await this.processVideoFrame(imageSrc);\n    }\n    return {\n      success: false,\n      confidence: 0,\n      message: 'Only video processing supported'\n    };\n  }\n  async processCardImage(imageSrc, cardType = 'standard') {\n    return {\n      success: false,\n      confidence: 0,\n      message: 'Only video processing supported'\n    };\n  }\n  setupCanvas(width, height) {\n    if (!this.canvas) {\n      this.canvas = document.createElement('canvas');\n      this.ctx = this.canvas.getContext('2d');\n    }\n    this.canvas.width = width;\n    this.canvas.height = height;\n    return {\n      canvas: this.canvas,\n      ctx: this.ctx\n    };\n  }\n}\nexport default GeminiVisionService;","map":{"version":3,"names":["GeminiVisionService","constructor","console","log","canvas","ctx","debugMode","geminiApiKey","geminiApiUrl","lastGeminiCall","geminiRateLimit","scryfallData","Map","scryfallLoaded","loadingScryfallData","initializeScryfallData","bulkResponse","fetch","bulkInfo","json","oracleCards","data","find","item","type","Error","size","Math","round","updated","updated_at","cardsResponse","download_uri","cardsData","processedCards","card","lang","_card$image_uris","cardKey","name","toLowerCase","set","oracle_id","set_name","set_code","type_line","mana_cost","cmc","colors","rarity","image_uri","image_uris","normal","scryfall_uri","error","message","processVideoFrame","videoElement","startTime","performance","now","frameData","captureHighQualityFrame","width","height","geminiResult","callGeminiVisionForMTG","enhancedResult","enhanceWithScryfallData","processingTime","formatMTGScannerResult","mtgFallback","Date","waitTime","imageBase64","frameToBase64","base64Data","split","length","mtgPrompt","requestBody","contents","parts","text","inline_data","mime_type","response","method","headers","body","JSON","stringify","status","statusText","ok","errorText","responseText","candidates","content","mtgAnalysis","parseMTGResponse","includes","hasCard","cardName","confidence","reason","lines","result","manaCost","cardType","setInfo","rulesText","line","trimmedLine","trim","startsWith","replace","parseInt","extractCardNameFromText","enhanced","has","scryfallCard","get","imageUri","scryfallUri","min","verificationSource","isVerified","fuzzyMatch","scryfallFuzzyMatch","found","isFuzzyMatch","matchScore","score","originalDetection","bestMatch","bestScore","minScore","key","calculateSimilarity","str1","str2","longer","shorter","distance","levenshteinDistance","matrix","n","m","i","j","charAt","document","createElement","getContext","videoWidth","videoHeight","imageSmoothingEnabled","imageSmoothingQuality","drawImage","imageData","getImageData","toDataURL","timestamp","toISOString","trimmed","test","scanCard","imageSrc","tagName","success","processCardImage","setupCanvas"],"sources":["C:/Users/kim-a/Documents/DiceyTeck/MTG Scanner BACKUP/src/ClaudeVisionService.js"],"sourcesContent":["// MTG-Focused GeminiVisionService.js - WITH SCRYFALL INTEGRATION\r\n// import Tesseract from 'tesseract.js'; // Using Gemini AI instead\r\n\r\nclass GeminiVisionService {\r\n    constructor() {\r\n        console.log('?? MTG CARD SCANNER - GEMINI + SCRYFALL INTEGRATION!');\r\n        this.canvas = null;\r\n        this.ctx = null;\r\n        this.debugMode = true;\r\n        \r\n        // GOOGLE GEMINI API CONFIGURATION\r\n        this.geminiApiKey = 'AIzaSyBtqyUy1X3BdNtUAW88QZWbtqI39MbUDdk';\r\n        this.geminiApiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';\r\n        this.lastGeminiCall = 0;\r\n        this.geminiRateLimit = 1000;\r\n        \r\n        // SCRYFALL INTEGRATION\r\n        this.scryfallData = new Map(); // Will store card name -> card data\r\n        this.scryfallLoaded = false;\r\n        this.loadingScryfallData = false;\r\n        \r\n        console.log('?? Gemini Vision API initialized successfully');\r\n        console.log('?? MTG-focused scanner with Scryfall database integration');\r\n        console.log('?? Loading Scryfall MTG database...');\r\n        \r\n        // Start loading Scryfall data\r\n        this.initializeScryfallData();\r\n        \r\n        this.log('?? MTG Scanner initialized - preparing Scryfall database');\r\n    }\r\n\r\n    async initializeScryfallData() {\r\n        if (this.loadingScryfallData || this.scryfallLoaded) return;\r\n        \r\n        this.loadingScryfallData = true;\r\n        console.log('?? Loading Scryfall MTG card database...');\r\n        \r\n        try {\r\n            // Get bulk data info from Scryfall\r\n            const bulkResponse = await fetch('https://api.scryfall.com/bulk-data');\r\n            const bulkInfo = await bulkResponse.json();\r\n            \r\n            // Find the Oracle Cards bulk data (best for card identification)\r\n            const oracleCards = bulkInfo.data.find(item => item.type === 'oracle_cards');\r\n            \r\n            if (!oracleCards) {\r\n                throw new Error('Oracle cards bulk data not found');\r\n            }\r\n            \r\n            console.log('?? Downloading Scryfall Oracle Cards database...');\r\n            console.log('?? Database info:', {\r\n                size: Math.round(oracleCards.size / 1024 / 1024) + ' MB',\r\n                updated: oracleCards.updated_at\r\n            });\r\n            \r\n            // Download the actual card data\r\n            const cardsResponse = await fetch(oracleCards.download_uri);\r\n            const cardsData = await cardsResponse.json();\r\n            \r\n            // Process and index the cards for fast lookup\r\n            let processedCards = 0;\r\n            for (const card of cardsData) {\r\n                if (card.lang === 'en') { // Only English cards\r\n                    const cardKey = card.name.toLowerCase();\r\n                    this.scryfallData.set(cardKey, {\r\n                        name: card.name,\r\n                        oracle_id: card.oracle_id,\r\n                        set: card.set_name,\r\n                        set_code: card.set,\r\n                        type_line: card.type_line,\r\n                        mana_cost: card.mana_cost || '',\r\n                        cmc: card.cmc || 0,\r\n                        colors: card.colors || [],\r\n                        rarity: card.rarity,\r\n                        image_uri: card.image_uris?.normal || '',\r\n                        scryfall_uri: card.scryfall_uri\r\n                    });\r\n                    processedCards++;\r\n                }\r\n            }\r\n            \r\n            this.scryfallLoaded = true;\r\n            console.log('? Scryfall database loaded successfully!');\r\n            console.log('?? Total MTG cards in database:', processedCards);\r\n            console.log('?? MTG Scanner ready for professional card identification!');\r\n            \r\n        } catch (error) {\r\n            console.error('? Failed to load Scryfall database:', error);\r\n            console.log('?? Falling back to basic MTG card detection');\r\n            this.scryfallLoaded = false;\r\n        } finally {\r\n            this.loadingScryfallData = false;\r\n        }\r\n    }\r\n\r\n    log(message, data = null) {\r\n        if (this.debugMode) {\r\n            console.log(`?? ${message}`, data || '');\r\n        }\r\n    }\r\n\r\n    // MAIN PROCESSING METHOD - MTG FOCUSED\r\n    async processVideoFrame(videoElement) {\r\n        this.log('?? Processing frame for MTG CARD IDENTIFICATION...');\r\n        const startTime = performance.now();\r\n        \r\n        try {\r\n            // Step 1: Capture frame\r\n            const frameData = await this.captureHighQualityFrame(videoElement);\r\n            this.log('?? Frame captured', `${frameData.width}x${frameData.height}`);\r\n            \r\n            // Step 2: MTG-focused Gemini Vision analysis\r\n            const geminiResult = await this.callGeminiVisionForMTG(frameData);\r\n            this.log('?? Gemini MTG analysis result', geminiResult);\r\n            \r\n            // Step 3: Enhance with Scryfall database\r\n            const enhancedResult = await this.enhanceWithScryfallData(geminiResult, frameData);\r\n            this.log('? Scryfall-enhanced result', enhancedResult);\r\n            \r\n            const processingTime = Math.round(performance.now() - startTime);\r\n            \r\n            return this.formatMTGScannerResult(enhancedResult, processingTime);\r\n            \r\n        } catch (error) {\r\n            this.log('? MTG scanning error, using fallback', error.message);\r\n            const processingTime = Math.round(performance.now() - startTime);\r\n            return await this.mtgFallback(videoElement, processingTime);\r\n        }\r\n    }\r\n\r\n    // MTG-OPTIMIZED GEMINI VISION CALL\r\n    async callGeminiVisionForMTG(frameData) {\r\n        this.log('?? Calling Gemini Vision for MTG CARD IDENTIFICATION...');\r\n        \r\n        // Rate limiting\r\n        const now = Date.now();\r\n        if (now - this.lastGeminiCall < this.geminiRateLimit) {\r\n            const waitTime = this.geminiRateLimit - (now - this.lastGeminiCall);\r\n            this.log(`? Rate limiting: waiting ${waitTime}ms`);\r\n            throw new Error(`Rate limited - wait ${waitTime}ms between calls`);\r\n        }\r\n        this.lastGeminiCall = now;\r\n        \r\n        // Convert frame to base64\r\n        const imageBase64 = this.frameToBase64(frameData);\r\n        const base64Data = imageBase64.split(',')[1];\r\n        this.log('?? Image ready for MTG analysis, size:', base64Data.length);\r\n        \r\n        // MAGIC: THE GATHERING SPECIFIC PROMPT\r\n        const mtgPrompt = `You are a Magic: The Gathering card identification expert. Analyze this image ONLY for Magic: The Gathering cards.\r\n\r\nIMPORTANT: If this is NOT a Magic: The Gathering card, respond with \"NOT_MTG_CARD\".\r\n\r\nIf you see a Magic: The Gathering card, identify:\r\n1. CARD NAME (most critical) - exact spelling\r\n2. Mana cost (symbols in top right)\r\n3. Card type line (Creature, Instant, Sorcery, etc.)\r\n4. Set symbol if visible\r\n5. Any visible rules text\r\n\r\nRESPOND IN EXACTLY THIS FORMAT:\r\nCARD_NAME: [exact card name]\r\nMANA_COST: [mana symbols]\r\nTYPE: [card type]\r\nSET: [set if visible]\r\nTEXT: [any visible rules text]\r\nCONFIDENCE: [1-100]\r\n\r\nExamples:\r\nCARD_NAME: Lightning Bolt\r\nMANA_COST: R\r\nTYPE: Instant\r\nSET: Unknown\r\nTEXT: Lightning Bolt deals 3 damage to any target\r\nCONFIDENCE: 95\r\n\r\nOnly analyze Magic: The Gathering cards. Ignore all other objects.`;\r\n\r\n        const requestBody = {\r\n            contents: [{\r\n                parts: [\r\n                    { text: mtgPrompt },\r\n                    {\r\n                        inline_data: {\r\n                            mime_type: \"image/jpeg\",\r\n                            data: base64Data\r\n                        }\r\n                    }\r\n                ]\r\n            }]\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${this.geminiApiUrl}?key=${this.geminiApiKey}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(requestBody)\r\n            });\r\n\r\n            this.log('?? Response received:', {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                ok: response.ok\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                this.log('? Gemini error response:', errorText);\r\n                throw new Error(`Gemini error: ${response.status} - ${errorText}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            \r\n            // CRITICAL: LOG THE RAW RESPONSE TO DEBUG JSON PARSING\r\n            const responseText = data.candidates[0].content.parts[0].text;\r\n            console.log('?? RAW GEMINI RESPONSE (for debugging):');\r\n            console.log('---START RESPONSE---');\r\n            console.log(responseText);\r\n            console.log('---END RESPONSE---');\r\n            \r\n            // Parse MTG-specific response format\r\n            const mtgAnalysis = this.parseMTGResponse(responseText);\r\n            this.log('? MTG parsing successful:', mtgAnalysis);\r\n            \r\n            return mtgAnalysis;\r\n\r\n        } catch (error) {\r\n            this.log('? Gemini MTG Vision call failed:', error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // PARSE MTG-SPECIFIC RESPONSE\r\n    parseMTGResponse(responseText) {\r\n        if (responseText.includes('NOT_MTG_CARD')) {\r\n            return {\r\n                hasCard: false,\r\n                cardName: '',\r\n                confidence: 0,\r\n                reason: 'Not a Magic: The Gathering card'\r\n            };\r\n        }\r\n        \r\n        const lines = responseText.split('\\n');\r\n        const result = {\r\n            hasCard: true,\r\n            cardName: '',\r\n            manaCost: '',\r\n            cardType: '',\r\n            setInfo: '',\r\n            rulesText: '',\r\n            confidence: 50\r\n        };\r\n        \r\n        for (const line of lines) {\r\n            const trimmedLine = line.trim();\r\n            if (trimmedLine.startsWith('CARD_NAME:')) {\r\n                result.cardName = trimmedLine.replace('CARD_NAME:', '').trim();\r\n            } else if (trimmedLine.startsWith('MANA_COST:')) {\r\n                result.manaCost = trimmedLine.replace('MANA_COST:', '').trim();\r\n            } else if (trimmedLine.startsWith('TYPE:')) {\r\n                result.cardType = trimmedLine.replace('TYPE:', '').trim();\r\n            } else if (trimmedLine.startsWith('SET:')) {\r\n                result.setInfo = trimmedLine.replace('SET:', '').trim();\r\n            } else if (trimmedLine.startsWith('TEXT:')) {\r\n                result.rulesText = trimmedLine.replace('TEXT:', '').trim();\r\n            } else if (trimmedLine.startsWith('CONFIDENCE:')) {\r\n                result.confidence = parseInt(trimmedLine.replace('CONFIDENCE:', '').trim()) || 50;\r\n            }\r\n        }\r\n        \r\n        // If no card name found, try extracting from raw text\r\n        if (!result.cardName) {\r\n            result.cardName = this.extractCardNameFromText(responseText);\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    // ENHANCE WITH SCRYFALL DATABASE\r\n    async enhanceWithScryfallData(geminiResult, frameData) {\r\n        this.log('? Enhancing with Scryfall MTG database...');\r\n        \r\n        if (!this.scryfallLoaded) {\r\n            this.log('?? Scryfall database not loaded yet, using basic enhancement');\r\n            return geminiResult;\r\n        }\r\n        \r\n        let enhanced = { ...geminiResult };\r\n        \r\n        if (geminiResult.hasCard && geminiResult.cardName) {\r\n            const cardKey = geminiResult.cardName.toLowerCase().trim();\r\n            \r\n            // Direct Scryfall lookup\r\n            if (this.scryfallData.has(cardKey)) {\r\n                const scryfallCard = this.scryfallData.get(cardKey);\r\n                enhanced = {\r\n                    ...enhanced,\r\n                    cardName: scryfallCard.name, // Use official name\r\n                    setInfo: scryfallCard.set,\r\n                    cardType: scryfallCard.type_line,\r\n                    manaCost: scryfallCard.mana_cost,\r\n                    rarity: scryfallCard.rarity,\r\n                    colors: scryfallCard.colors,\r\n                    imageUri: scryfallCard.image_uri,\r\n                    scryfallUri: scryfallCard.scryfall_uri,\r\n                    confidence: Math.min(enhanced.confidence + 20, 95),\r\n                    verificationSource: 'scryfall_exact_match',\r\n                    isVerified: true\r\n                };\r\n                this.log('? EXACT MATCH found in Scryfall database:', scryfallCard.name);\r\n            } else {\r\n                // Fuzzy matching in Scryfall database\r\n                const fuzzyMatch = this.scryfallFuzzyMatch(cardKey);\r\n                if (fuzzyMatch.found) {\r\n                    enhanced = {\r\n                        ...enhanced,\r\n                        cardName: fuzzyMatch.card.name,\r\n                        setInfo: fuzzyMatch.card.set,\r\n                        cardType: fuzzyMatch.card.type_line,\r\n                        manaCost: fuzzyMatch.card.mana_cost,\r\n                        confidence: Math.min(enhanced.confidence + 15, 90),\r\n                        verificationSource: 'scryfall_fuzzy_match',\r\n                        isFuzzyMatch: true,\r\n                        matchScore: fuzzyMatch.score,\r\n                        originalDetection: geminiResult.cardName\r\n                    };\r\n                    this.log('?? FUZZY MATCH found in Scryfall:', fuzzyMatch.card.name);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return enhanced;\r\n    }\r\n\r\n    // SCRYFALL FUZZY MATCHING\r\n    scryfallFuzzyMatch(cardName) {\r\n        let bestMatch = null;\r\n        let bestScore = 0;\r\n        const minScore = 0.7;\r\n        \r\n        // Search through Scryfall database\r\n        for (const [key, card] of this.scryfallData) {\r\n            const score = this.calculateSimilarity(cardName, key);\r\n            if (score > bestScore && score >= minScore) {\r\n                bestScore = score;\r\n                bestMatch = card;\r\n            }\r\n        }\r\n        \r\n        return bestMatch ? \r\n            { found: true, card: bestMatch, score: bestScore } : \r\n            { found: false, card: null, score: 0 };\r\n    }\r\n\r\n    // STRING SIMILARITY CALCULATION\r\n    calculateSimilarity(str1, str2) {\r\n        const longer = str1.length > str2.length ? str1 : str2;\r\n        const shorter = str1.length > str2.length ? str2 : str1;\r\n        \r\n        if (longer.length === 0) return 1.0;\r\n        \r\n        const distance = this.levenshteinDistance(longer, shorter);\r\n        return (longer.length - distance) / longer.length;\r\n    }\r\n\r\n    levenshteinDistance(str1, str2) {\r\n        const matrix = [];\r\n        const n = str2.length;\r\n        const m = str1.length;\r\n\r\n        if (n === 0) return m;\r\n        if (m === 0) return n;\r\n\r\n        for (let i = 0; i <= n; i++) {\r\n            matrix[i] = [i];\r\n        }\r\n\r\n        for (let j = 0; j <= m; j++) {\r\n            matrix[0][j] = j;\r\n        }\r\n\r\n        for (let i = 1; i <= n; i++) {\r\n            for (let j = 1; j <= m; j++) {\r\n                if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\r\n                    matrix[i][j] = matrix[i - 1][j - 1];\r\n                } else {\r\n                    matrix[i][j] = Math.min(\r\n                        matrix[i - 1][j - 1] + 1,\r\n                        matrix[i][j - 1] + 1,\r\n                        matrix[i - 1][j] + 1\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        return matrix[n][m];\r\n    }\r\n\r\n    // CAPTURE HIGH-QUALITY FRAME\r\n    async captureHighQualityFrame(videoElement) {\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        canvas.width = videoElement.videoWidth;\r\n        canvas.height = videoElement.videoHeight;\r\n        \r\n        ctx.imageSmoothingEnabled = true;\r\n        ctx.imageSmoothingQuality = 'high';\r\n        ctx.drawImage(videoElement, 0, 0);\r\n        \r\n        return {\r\n            canvas: canvas,\r\n            width: canvas.width,\r\n            height: canvas.height,\r\n            imageData: ctx.getImageData(0, 0, canvas.width, canvas.height)\r\n        };\r\n    }\r\n\r\n    frameToBase64(frameData) {\r\n        return frameData.canvas.toDataURL('image/jpeg', 0.9);\r\n    }\r\n\r\n    // FORMAT MTG SCANNER RESULT\r\n    formatMTGScannerResult(result, processingTime) {\r\n        if (result.hasCard && result.confidence >= 60 && result.cardName && result.cardName.length >= 3) {\r\n            return {\r\n                hasCard: true,\r\n                cardName: result.cardName,\r\n                confidence: result.confidence,\r\n                setInfo: result.setInfo || 'Unknown Set',\r\n                cardType: result.cardType || 'Unknown Type',\r\n                manaCost: result.manaCost || '',\r\n                rarity: result.rarity || 'Unknown',\r\n                colors: result.colors || [],\r\n                imageUri: result.imageUri || '',\r\n                scryfallUri: result.scryfallUri || '',\r\n                method: 'mtg_gemini_scryfall',\r\n                isVerified: result.isVerified || false,\r\n                isFuzzyMatch: result.isFuzzyMatch || false,\r\n                verificationSource: result.verificationSource || 'none',\r\n                processingTime: processingTime,\r\n                timestamp: new Date().toISOString(),\r\n                scryfallLoaded: this.scryfallLoaded\r\n            };\r\n        } else {\r\n            const reason = result.confidence < 60 ? 'LOW_CONFIDENCE' : 'NO_MTG_CARD_DETECTED';\r\n            const message = result.confidence < 60 ? \r\n                `MTG card detected but confidence too low (${result.confidence}%) - improve lighting/angle` : \r\n                'No Magic: The Gathering card detected - position card clearly in view';\r\n                \r\n            return {\r\n                hasCard: false,\r\n                message: message,\r\n                reason: reason,\r\n                confidence: result.confidence || 0,\r\n                method: 'mtg_gemini_scryfall',\r\n                processingTime: processingTime,\r\n                timestamp: new Date().toISOString(),\r\n                scryfallLoaded: this.scryfallLoaded\r\n            };\r\n        }\r\n    }\r\n\r\n    // MTG FALLBACK\r\n    async mtgFallback(videoElement, processingTime) {\r\n        this.log('?? MTG Vision unavailable, using basic fallback...');\r\n        \r\n        return {\r\n            hasCard: false,\r\n            message: 'MTG Scanner temporarily unavailable - please try again',\r\n            reason: 'SCANNER_ERROR',\r\n            confidence: 0,\r\n            method: 'mtg_fallback',\r\n            processingTime: processingTime,\r\n            timestamp: new Date().toISOString(),\r\n            scryfallLoaded: this.scryfallLoaded\r\n        };\r\n    }\r\n\r\n    // HELPER METHODS\r\n    extractCardNameFromText(text) {\r\n        const lines = text.split('\\n');\r\n        for (const line of lines) {\r\n            const trimmed = line.trim();\r\n            if (trimmed.length > 3 && trimmed.length < 50 && /^[A-Z]/.test(trimmed) && \r\n                !trimmed.includes('http') && !trimmed.includes('@') && !trimmed.includes('CARD_NAME')) {\r\n                return trimmed;\r\n            }\r\n        }\r\n        return 'Unknown Card';\r\n    }\r\n\r\n    // COMPATIBILITY METHODS\r\n    async scanCard(imageSrc, cardType = 'standard') {\r\n        if (imageSrc && imageSrc.tagName === 'VIDEO') {\r\n            return await this.processVideoFrame(imageSrc);\r\n        }\r\n        return { success: false, confidence: 0, message: 'Only video processing supported' };\r\n    }\r\n\r\n    async processCardImage(imageSrc, cardType = 'standard') {\r\n        return { success: false, confidence: 0, message: 'Only video processing supported' };\r\n    }\r\n\r\n    setupCanvas(width, height) {\r\n        if (!this.canvas) {\r\n            this.canvas = document.createElement('canvas');\r\n            this.ctx = this.canvas.getContext('2d');\r\n        }\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n        return { canvas: this.canvas, ctx: this.ctx };\r\n    }\r\n}\r\n\r\nexport default GeminiVisionService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}